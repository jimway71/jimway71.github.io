<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>V2RAY on 点滴随记</title>
        <link>https://jimway71.github.io/tags/v2ray/</link>
        <description>Recent content in V2RAY on 点滴随记</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 28 Apr 2021 19:46:16 +0800</lastBuildDate><atom:link href="https://jimway71.github.io/tags/v2ray/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>在kubesail上搭建V2Ray</title>
        <link>https://jimway71.github.io/p/%E5%9C%A8kubesail%E4%B8%8A%E6%90%AD%E5%BB%BAv2ray/</link>
        <pubDate>Wed, 28 Apr 2021 19:46:16 +0800</pubDate>
        
        <guid>https://jimway71.github.io/p/%E5%9C%A8kubesail%E4%B8%8A%E6%90%AD%E5%BB%BAv2ray/</guid>
        <description>&lt;img src="https://jimway71.github.io/wallpaper/NAFO-40-c.jpg" alt="Featured image of post 在kubesail上搭建V2Ray" /&gt;&lt;p&gt;Pic From &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/MBlech/status/1569878935512416260&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@MBlech #NAFO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考: &lt;a class=&#34;link&#34; href=&#34;https://bawodu.com/kubesail/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KubeSail免费无限制容器1核512MB內存使用教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://kubesail.com/homepage&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KubeSail&lt;/a&gt;官方不允许在共享cluster上使用v2ray, 而在用户自己的cluster上则允许使用v2ray。&lt;br&gt;
官方社区里, 下面这段表明了其官方态度:&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://gitter.im/KubeSail/community?at=5e819bf72725b83acd53badb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;why was my container removed ? I use a public container&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>在Heroku上部署V2Ray&#43;Trojan-go</title>
        <link>https://jimway71.github.io/p/%E5%9C%A8heroku%E4%B8%8A%E9%83%A8%E7%BD%B2v2ray-trojan-go/</link>
        <pubDate>Wed, 28 Apr 2021 14:17:16 +0800</pubDate>
        
        <guid>https://jimway71.github.io/p/%E5%9C%A8heroku%E4%B8%8A%E9%83%A8%E7%BD%B2v2ray-trojan-go/</guid>
        <description>&lt;img src="https://jimway71.github.io/wallpaper/wallpaper-37.jpg" alt="Featured image of post 在Heroku上部署V2Ray&#43;Trojan-go" /&gt;&lt;h2 id=&#34;heroku介绍&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com/&#34;  title=&#34;Heroku&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;(拷自&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/zh-tw/Heroku&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;维基百科Heroku&lt;/a&gt;)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com/&#34;  title=&#34;Heroku&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku&lt;/a&gt;是一个支持多种编程语言的云平台即服务。在2010年被&amp;lt;Salesforce.com&amp;gt;收购。&lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com/&#34;  title=&#34;Heroku&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku&lt;/a&gt;作为最元祖的云平台之一[1]，从2007年6月起开发，当时它仅支持Ruby，但后来增加了对Java、Node.js、Scala、Clojure、Python以及（未记录在正式文件上）PHP和Perl的支持。基础操作系统是Debian，在最新的技术堆栈则是基于Debian的Ubuntu[2].&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com/&#34;  title=&#34;Heroku&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku&lt;/a&gt;免费提供美国、欧洲两个节点的容器服务，容器支持多种编程语言。&lt;br&gt;
当前, &lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com/&#34;  title=&#34;Heroku&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku&lt;/a&gt; Dyno免费套餐是一个月550个动态小时，2TB的流量限制; 用信用卡验证能再免费获得450个小时免费动态小时时长.&lt;br&gt;
对于Heroku的免费动态小时, 在网上查到的是, 原来免费的&lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com/&#34;  title=&#34;Heroku&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku&lt;/a&gt;测试机每天至少需要睡眠6个小时, 后来, Heroku更改了Free Dynos的政策。现在不再是每个应用程序的限制(例如每天6小时的睡眠时间), 而是每个帐户的限制。&lt;br&gt;
&lt;strong&gt;对于动态小时, 我的理解是指有访问的时长, 不包括机器空闲的时间&lt;/strong&gt;.&lt;br&gt;
基于&lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com/&#34;  title=&#34;Heroku&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku&lt;/a&gt;的容器服务, 可以用于部署v2ray/trojan-go服务. 由于可能有&lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com/&#34;  title=&#34;Heroku&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku&lt;/a&gt;所指&amp;quot;滥用&amp;quot;风险, 因此, 不要将&lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com/&#34;  title=&#34;Heroku&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku&lt;/a&gt;用于做主力服务器.&lt;/p&gt;
&lt;p&gt;&lt;u&gt;迁移时补充:&lt;br&gt;
2022年8月25日, BOB WISE, HEROKU GENERAL MANAGER AND SALESFORCE EVP, 在&lt;a class=&#34;link&#34; href=&#34;https://blog.heroku.com/next-chapter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku’s Next Chapter&lt;/a&gt;中写到, 计划于&lt;strong&gt;2022年11月28日起停止免费产品计划&lt;/strong&gt;, 原因是对 Heroku 免费产品计划的欺诈和滥用耗费了团队大量精力。&lt;/u&gt;&lt;/p&gt;
&lt;h2 id=&#34;在heroku上安装v2raytrojan&#34;&gt;在Heroku上安装V2Ray/Trojan&lt;/h2&gt;
&lt;h3 id=&#34;申请heroku帐号&#34;&gt;申请Heroku帐号&lt;/h3&gt;
&lt;p&gt;申请&lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com/&#34;  title=&#34;Heroku&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku&lt;/a&gt;帐号非常简单, 只需要一个电子邮箱就可以了, 比Oracle云申请简单得多.&lt;/p&gt;
&lt;h3 id=&#34;uuid生成器&#34;&gt;UUID生成器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://1024tools.com/uuid&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UUID在线生成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用下面所述方式部署V2Ray+Trojan需要一个UUID, 可以使用上述在线UUID生成器即时生成一个唯一的UUID.&lt;br&gt;
另外, V2Ray的Win10客户端也可以生成UUID.&lt;/p&gt;
&lt;h3 id=&#34;部署v2raytrojan&#34;&gt;部署V2Ray/Trojan&lt;/h3&gt;
&lt;p&gt;查了下Github上有两个高STAR+高Fork的&amp;quot;在Heroku上部署V2Ray/Trojan&amp;quot;的项目, 分别是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/bclswl0827/v2ray-heroku&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;V2Ray Heroku&lt;/a&gt;: 用这个配置后不能用, 就用下一个.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mixool/xrayku&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xrayku&lt;/a&gt;              (链接已失效)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在相应网页上, 点击紫色的&amp;quot;Deploy to Heroku&amp;quot;按钮, 即可开始部署工作.&lt;br&gt;
执行部署时, region选择&amp;quot;Europe&amp;quot;(欧洲), 因为据说选择美国会造成访问Youtube时出现异常, 尽管并不严重(只是无法评论?).&lt;br&gt;
填入新生成的UUID, 点击&amp;quot;Deploy app&amp;quot;按钮执行部署, 然后下面就出现执行部署时的输出, 看着就有点像执行&amp;quot;Docker pull image名&amp;quot;的输出, 过一会儿就会出现&amp;quot;Your app was successfully deployed.&amp;quot;, 表明部署已经成功.&lt;/p&gt;
&lt;h3 id=&#34;按照xraykuhttpsgithubcommixoolxrayku上的说明修改客户端配置文件-测试&#34;&gt;按照&lt;a class=&#34;link&#34; href=&#34;https://github.com/mixool/xrayku&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xrayku&lt;/a&gt;上的说明修改客户端配置文件, 测试&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>安装翻墙服务器(V2ray&#43;ss&#43;brook)</title>
        <link>https://jimway71.github.io/p/%E5%AE%89%E8%A3%85%E7%BF%BB%E5%A2%99%E6%9C%8D%E5%8A%A1%E5%99%A8v2ray-ss-brook/</link>
        <pubDate>Thu, 05 Mar 2020 01:53:16 +0800</pubDate>
        
        <guid>https://jimway71.github.io/p/%E5%AE%89%E8%A3%85%E7%BF%BB%E5%A2%99%E6%9C%8D%E5%8A%A1%E5%99%A8v2ray-ss-brook/</guid>
        <description>&lt;img src="https://jimway71.github.io/wallpaper/wallpaper-15.jpg" alt="Featured image of post 安装翻墙服务器(V2ray&#43;ss&#43;brook)" /&gt;&lt;p&gt;简单说明:&lt;br&gt;
系统: Ubuntu 18.04 LTS。&lt;br&gt;
a.安装: V2RAY mKCP+dtls, AAAA; ss: BBBB; brook: CCCC。&lt;br&gt;
b.(V2ray安装的)shadowsocks改用了新的加密方式(AHEAD: chacha20-ietf-poly1305), 以避免被GFW检测到&lt;br&gt;
终端软件上, 不再使用单独的shadowsocks终端, 而改用v2ray终端(包含shadowsocks终端)&lt;br&gt;
电脑上使用V2rayN, 安卓手机上使用BifrostV&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在Ubuntu Server 18.04版上进行安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;0.确认unzip已安装(可以直接运行unzip)&lt;/strong&gt;&lt;br&gt;
如果没有安装, 用下面命令装(如果unzip没有安装, 会自动提示这条命令)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# sudo apt install unzip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.V2RAY+ss(单端口)安装, 再+BBR&lt;/strong&gt;&lt;br&gt;
V2RAY一键安装&lt;br&gt;
选择:&lt;br&gt;
V2RAY ~ 协议 mKCP_dtls, 端口 AAAA&lt;br&gt;
ss 和原来一样&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://ssr.tools/1026&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ssr.tools/1026&lt;/a&gt;
安装时, BBR自己就装上了&lt;/p&gt;
&lt;p&gt;使用233版V2ray一键安装脚本(集成BBR/锐速/Shadowsocks):&lt;/p&gt;
&lt;h1 id=&#34;bash-curl--s--l-httpsgitiov2raysh&#34;&gt;bash &amp;lt;(curl -s -L &lt;a class=&#34;link&#34; href=&#34;https://git.io/v2ray.sh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://git.io/v2ray.sh&lt;/a&gt;)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;2.Brook安装&lt;/strong&gt;&lt;br&gt;
参考&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://doub.io/brook-jc1/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doub.io/brook-jc1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1)下载&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# mkdir /root/brook/&lt;br&gt;
# cd /root/brook/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最新版本地址: &lt;a class=&#34;link&#34; href=&#34;https://github.com/txthinking/brook#download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/txthinking/brook#download&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# wget -N &amp;ndash;no-check-certificate &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://github.com/txthinking/brook/releases/download/v20200201/brook%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/txthinking/brook/releases/download/v20200201/brook&#34;&lt;/a&gt;&lt;br&gt;
# chmod +x brook&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2)启动&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# nohup   ./brook server -l :CCCC-p passwd &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3)防火墙&lt;br&gt;
[ 现在没开云服务器ubuntu自身的防火墙iptable/ufw&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# sudo ufw  allow CCCC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;]&lt;/p&gt;
&lt;p&gt;云的防火墙也要打开&lt;/p&gt;
&lt;p&gt;4)开机自启动&lt;br&gt;
由于ubuntu 18.04的变化, 原rc.local初始不再有效, 需要处理, 参考:&lt;br&gt;
Ubuntu 18.04 rc.local systemd设置&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/zhengchaooo/article/details/80202599&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/zhengchaooo/article/details/80202599&lt;/a&gt;&lt;br&gt;
命令如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ln -fs /lib/systemd/system/rc-local.service /etc/systemd/system/rc-local.service&lt;br&gt;
# touch /etc/rc.local&lt;br&gt;
# chmod 755 /etc/rc.local&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;并在/etc/rc.local第一行加上下面这行:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;#!/bin/bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后面一样&lt;br&gt;
参考&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://blog.csdn.net/fireroll/article/details/15503463&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://blog.csdn.net/fireroll/article/details/15503463&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;放在/etc/rc.local里&lt;br&gt;
加入:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nohup   /root/brook/brook server -l :CCCC-p passwd &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意brook所在目录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.谷歌云防火墙开端口(需要打开相应端口的tcp/udp端口)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.本机ubuntu防火墙(ufw/iptables)不开&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.设置时区&lt;/strong&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://www.cnblogs.com/h2appy/archive/2008/11/27/1342029.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.cnblogs.com/h2appy/archive/2008/11/27/1342029.html&lt;/a&gt;&lt;br&gt;
tzselect&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.定时关机&lt;/strong&gt;&lt;br&gt;
cron里的时间是标准时间(GMT)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html&lt;/a&gt;&lt;br&gt;
cron任务分两类, 系统任务_在/etc/crontab里; 用户任务_在/var/spool/cron/crontabs/里&lt;br&gt;
crontab -e是编辑用户任务, crontab -l是显示用户任务.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# cat /etc/crontab  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# /etc/crontab: system-wide crontab  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Unlike any other crontab you don&amp;#39;t have to run the `crontab&amp;#39;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# command to install the new version when you edit this file  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# and files in /etc/cron.d. These files also have username fields,  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# that none of the other crontabs do. 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHELL=/bin/sh  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# m h dom mon dow user  command  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;17 *    * * *   root    cd / &amp;amp;&amp;amp; run-parts --report /etc/cron.hourly  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / &amp;amp;&amp;amp; run-parts --report /etc/cron.daily )  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / &amp;amp;&amp;amp; run-parts --report /etc/cron.weekly )  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / &amp;amp;&amp;amp; run-parts --report /etc/cron.monthly )  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;30 21 * * 2,4,6,0 root reboot  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;每周2,4,6,0 _ GMT时间21:30分(中国时间5:30)用户root重启&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://blog.csdn.net/xiyuan1999/article/details/8160998&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://blog.csdn.net/xiyuan1999/article/details/8160998&lt;/a&gt;&lt;br&gt;
查看调度任务&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# crontab -l //列出当前的所有调度任务&lt;br&gt;
# crontab -l -u jp   //列出用户jp的所有调度任务&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
