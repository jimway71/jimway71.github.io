<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Docker on 点滴随记</title>
        <link>https://jimway71.github.io/tags/docker/</link>
        <description>Recent content in Docker on 点滴随记</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 10 Apr 2021 16:25:16 +0800</lastBuildDate><atom:link href="https://jimway71.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>用R3300L做家用服务器</title>
        <link>https://jimway71.github.io/p/%E7%94%A8r3300l%E5%81%9A%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
        <pubDate>Sat, 10 Apr 2021 16:25:16 +0800</pubDate>
        
        <guid>https://jimway71.github.io/p/%E7%94%A8r3300l%E5%81%9A%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
        <description>&lt;img src="https://jimway71.github.io/wallpaper/wallpaper-39.jpg" alt="Featured image of post 用R3300L做家用服务器" /&gt;&lt;h2 id=&#34;期望实现功能列表&#34;&gt;期望实现功能列表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Docker下跑openwrt, 测试用  ✔&lt;/li&gt;
&lt;li&gt;文件共享服务器 ✅ (实现功能, 但性能极差)&lt;/li&gt;
&lt;li&gt;DLNA服务器  ✔&lt;/li&gt;
&lt;li&gt;Docker下跑wordpress服务器(补充: 最终改成直接Armbian上跑Hugo服务器  ✔)&lt;/li&gt;
&lt;li&gt;小型linux服务器  ✔&lt;br&gt;
&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装与配置&#34;&gt;安装与配置&lt;/h2&gt;
&lt;h3 id=&#34;在tv-boxr3300l-s905l上安装armbian&#34;&gt;在TV box(R3300L, S905L)上安装Armbian&lt;/h3&gt;
&lt;h4 id=&#34;制作启动tf卡&#34;&gt;制作启动TF卡&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Armbian安装所用镜像来源: &lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/milton/p/11883811.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;R3300L运行CoreELEC, EmuELEC和Armbian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Armbian On TV Box原作者发布贴:&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://forum.armbian.com/topic/12162-single-armbian-image-for-rk-aml-aw-aarch64-armv8/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;balbes150: Single Armbian image for RK + AML + AW (aarch64 ARMv8) By balbes150&lt;/a&gt;&lt;br&gt;
原作者最新的(bonic)镜像经测试, 在R3300L上, 要么卡Start Kernel, 要么黑屏。&lt;br&gt;
可用的镜像分享地址: &lt;a class=&#34;link&#34; href=&#34;https://share.weiyun.com/5eCvcvS&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://share.weiyun.com/5eCvcvS&lt;/a&gt; 密码：mivmcn&lt;br&gt;
上述地址中最新的可用稳定版本: Armbian_5.9.7_Aml-g12-ubuntu_bionic_5.3.0_20190923.img.xz&lt;br&gt;
卡刷后, 修改env.txt, dtb文件选择文件名有212那个(有网卡, 无wifi)&lt;br&gt;
注: Armbian初始用户/密码: root/1234&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用tf卡启动后操作-重新调整启动tf卡分区&#34;&gt;用TF卡启动后操作: 重新调整启动TF卡分区&lt;/h4&gt;
&lt;p&gt;TF卡第一次启动后，会自动扩展主要分区, 占用全部空间，因为想做文件服务器, 因此需要修改主要分区, 把部分空间分给exfat分区。&lt;br&gt;
参考: &lt;a class=&#34;link&#34; href=&#34;http://jimway.blogspot.com/2021/04/armbian-on-tv-box.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;armbian on TV box&lt;/a&gt;&lt;br&gt;
Armbian装TF卡上, 有两个分区, 128M*1 + 1.2G*1.&lt;br&gt;
第一次启动时, 系统会自动扩展第二个分区, 会占满整个TF卡&lt;br&gt;
希望留一块空间是windows能读写的(考虑exfat格式), 即使系统坏了, 数据还能读.&lt;br&gt;
因此, 需要无损调整EXT4分区大小&lt;br&gt;
参考: &lt;a class=&#34;link&#34; href=&#34;https://blog.pinkd.moe/linux/2018/01/31/resize-a-ext4-partiton-safely&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;无损调整EXT4分区大小&lt;/a&gt;&lt;br&gt;
操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先等系统启动自动完成扩展.&lt;/li&gt;
&lt;li&gt;关机, 拿出卡, 插到另一个linux(ubuntu类最好)机器上, 不做为启动盘使用(不需要一直mount上), 启动linux.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 看分区  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# lsblk  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 检查需要调整的分区  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# e2fsck -f /dev/sda2  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 调整分区文件系统到5G.  注意: 需要配合下一步才能生效 _ 这里应该只是把用到的空间都挪到前面5G的空间去了, 但没有实际调整分区大小  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# resize2fs /dev/sda2 5G  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 进fdisk, 先删除sda2, 再重建5G大小的sda2  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# fdisk /dev/sda  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 删除原sda2  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): d  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command):  2  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 新建5G大小的sda2  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): n        # 新建  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): 2        # 第2分区  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): Sectors位置, sda1 End+1    # 起始sectors位置  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): +5G                                    # 大小, 或结果secotrs位置: 这里写的是大小, 以+开始, +后面是要划分的空间大小(5G)  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): 发现ext4签名, 是否删除: N 不删除  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 顺便把exfat分区也建上...  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): w    # 写盘退出  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 再检查一下，没有错误就说明没问题了  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# e2fsck -f /dev/sda2  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;无损调整分区操作结果: 成功&lt;br&gt;
先在windows上格式化了exfat分区, 读写没问题.&lt;br&gt;
然后用这张卡启动linux正常, 用fdisk看分区也正常.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注1: 处理不能使用上述方法调整分区的情况&lt;/strong&gt;&lt;br&gt;
情况描述:&lt;br&gt;
有一张128G的卡, 完成armbian第一次启动,系统自动扩展主分区到占满整张卡后,用另一张TF卡启动到Armbian, 把128G卡插到机器上, 试图用e2fsck+resize2fs命令调整分区, 但系统报错说该该已加载,不能完成上述命令.&lt;br&gt;
考虑到这张卡只用了一次,后面要分出来的空间应该还没有用到, 因此就用fdsik强行重新分区, 并且&lt;u&gt;不格式化&lt;/u&gt;调整小的分区,希望能行.&lt;br&gt;
但完成后用这张卡重启,启动失败,不能进入系统.&lt;br&gt;
调整分区失败.&lt;br&gt;
处理方式(试):&lt;br&gt;
用一张小点的TF卡做armbian系统,完成后用这张卡启动,完成分区调整.&lt;br&gt;
再把这张卡用USB Image Tool 写U盘镜像工具复制到128G的卡中(从小卡上备份到文件, 在大卡上从文件恢复),这样系统会占用8G的空间,剩余的空间用fdisk(armbian上)分区成extfat,再到Windows上格式化为exfat就ok.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注2: 让Armbian挂载exfat磁盘&lt;/strong&gt;&lt;br&gt;
情况描述: Armbian缺省安装不包括exfat支持,需要如下操作安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 更新软件包信息  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# apt-get update  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 查找exfat相关包名  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# apt-cache search exfat  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 安装exfat支持  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# apt-get install exfat-fuse exfat-utils  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 安装完成后, 即可手动挂载  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 建立挂载点  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# mkdir /mnt/mmcblk0p3  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 挂载  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# mount -t exfat /dev/mmcblk0p3 /mnt/mmcblk0p3/  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注3: 让Armbian系统启动时自动挂载exfat磁盘&lt;/strong&gt;&lt;br&gt;
情况描述: Armbian启动时不会自动挂载exfat磁盘, 需要修改/etc/fstab文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 取需要挂载的exfat设备uuid  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# blkid /dev/mmcblk0p3  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/dev/mmcblk0p3: UUID=&amp;#34;FAAE-B3A5&amp;#34; TYPE=&amp;#34;exfat&amp;#34; PARTUUID=&amp;#34;de8d9e8d-09&amp;#34;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 修改自动挂载配置文件/etc/fstab  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# vim /etc/fstab  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 在最后增加  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;UUID=&amp;#34;FAAE-B3A5&amp;#34; /mnt/mmcblk0p3 exfat defaults 0 0  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 其中  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 第1列：磁盘装置文件名或该装置的 Label  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 第2列：Mount point 设备的挂载点，就是你要挂载到哪个目录下  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 第3列：filesystem 磁盘文件系统的格式  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 第4列：文件系统参数 parameters  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 第5列：能否被 dump 备份命令作用  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 第6列：是否以 fsck 检验扇区  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;配置完成后重启确认可以正常挂载.&lt;/p&gt;
&lt;p&gt;&lt;u&gt;注: 当前R3300L的Blk情况:&lt;/u&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# lsblk  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mmcblk0      179:0    0 119.3G  0 disk   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|-mmcblk0p1  179:1    0   128M  0 part /boot  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|-mmcblk0p2  179:2    0   7.3G  0 part /  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;`-mmcblk0p3  179:3    0 111.8G  0 part /mnt/ext  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mmcblk1      179:32   0   7.3G  0 disk   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mmcblk1boot0 179:64   0     4M  1 disk   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mmcblk1boot1 179:96   0     4M  1 disk   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;zram0        253:0    0    50M  0 disk /var/log  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;zram1        253:1    0 400.5M  0 disk [SWAP]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* mmcblk1是内置的EMMC存储  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;配置armbian&#34;&gt;配置Armbian&lt;/h4&gt;
&lt;p&gt;系统提供armbian-config工具, 功能很丰富, 多数设置可以在这里完成&lt;br&gt;
主要是修改网络配置, 配置时区、时间，配置语言什么的。&lt;/p&gt;
&lt;p&gt;网络似乎需要手动配置:&lt;br&gt;
先装vim&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# apt-get update  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# apt-get install vim  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 再装个ufw(防火墙工具)  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# apt-get install ufw  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;修改网卡配置文件-etcnetworkinterfaces&#34;&gt;修改网卡配置文件 /etc/network/interfaces&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iface eth0 inet static  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;address 192.168.1.2  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;netmask 255.255.255.0  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gateway 192.168.1.1  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dnsnameservers 192.168.1.1 8.8.8.8 8.8.4.4  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;在armbian上安装docker和portainer&#34;&gt;在Armbian上安装Docker和portainer&lt;/h3&gt;
&lt;h4 id=&#34;在armbian上安装docker&#34;&gt;在Armbian上安装Docker&lt;/h4&gt;
&lt;p&gt;参考官网安装说明: &lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/get-docker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Get Docker&lt;/a&gt; -&amp;gt; &lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/engine/install/ubuntu/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Install Docker Engine on Ubuntu&lt;/a&gt;&lt;br&gt;
使用官方的shell安装，如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# curl -fsSL &lt;a class=&#34;link&#34; href=&#34;https://get.docker.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://get.docker.com&lt;/a&gt; -o get-docker.sh&lt;br&gt;
# sh get-docker.sh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装完成后, 用下面命令测试&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker run hello-world&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(另: 也可用armbian-config安装docker, 完成后用docker run hello-world测试,docker能正常工作, 但安装portainer-ce后不正常, 后换回用官方shell安装)&lt;/p&gt;
&lt;h4 id=&#34;在docker上安装portainer-用于docker管理&#34;&gt;在Docker上安装Portainer, 用于Docker管理&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 安装  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# docker pull portainer/portainer-ce  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 启动  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# docker volume create portainer_data  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后用浏览器打开http://armbian设备网址:9000, 就能看到portainer的管理界面&lt;br&gt;
在管理界面里进行初始配置。&lt;/p&gt;
&lt;h5 id=&#34;补充-忘记portainer密码后-如何修改portainer密码&#34;&gt;补充: 忘记Portainer密码后, 如何修改portainer密码&lt;/h5&gt;
&lt;p&gt;参考: &lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/A1999/p/15993682.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker管理工具Portainer忘记admin登录密码怎么办?&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;查看portainer的container-id&#34;&gt;查看Portainer的CONTAINER ID&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# docker ps -a  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CONTAINER ID   IMAGE                    COMMAND        CREATED      STATUS                  PORTS                                                                                            NAMES  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;30f1a2690e55   portainer/portainer-ce   &amp;#34;/portainer&amp;#34;   7 days ago   Up 7 hours              0.0.0.0:8000-&amp;gt;8000/tcp, :::8000-&amp;gt;8000/tcp, 0.0.0.0:9000-&amp;gt;9000/tcp, :::9000-&amp;gt;9000/tcp, 9443/tcp   portainer  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;看到portainer的CONTAINER ID为30f1a2690e55&lt;/p&gt;
&lt;h5 id=&#34;停止portainer容器参数为portainer的container-id&#34;&gt;停止Portainer容器(参数为portainer的CONTAINER ID)&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker stop 30f1a2690e55&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;重置密码-命令中-v后的参数portainer_datadata与启动时见前面docker-run用的一样&#34;&gt;重置密码: 命令中-v后的参数(portainer_data:/data)与启动时(见前面docker run)用的一样&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# docker run --rm -v portainer_data:/data portainer/helper-reset-password  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 第一次调用时, portainer/helper-reset-password会下载安装   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Unable to find image &amp;#39;portainer/helper-reset-password:latest&amp;#39; locally  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;latest: Pulling from portainer/helper-reset-password  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;79916c70cb9e: Pull complete  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;69e9153f20cb: Pull complete  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Digest: sha256:735a809b1bfe14b5fae340d4b350bae97c2016371c47fb6e34d71a45e4512f79  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status: Downloaded newer image for portainer/helper-reset-password:latest  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;WARNING: The requested image&amp;#39;s platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2022/07/24 05:17:47 Password succesfully updated for user: admin  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2022/07/24 05:17:47 Use the following password to login: 3&amp;lt;X$v+1PLx-Jj2pY4GBq79=5Us8R_n/\  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;需要记住这个密码.&lt;br&gt;
另: 在Portainer的web管理界面中, settings-&amp;gt;Authentication-&amp;gt;Password Rules, 可以修改密码强度(长度)&lt;br&gt;
注意: 在Docker中跑的Image需要和系统的Architectures一致, 比如R3300L需要选择ARM64 Architectures的image&lt;/p&gt;
&lt;h3 id=&#34;在docker上跑openwrt&#34;&gt;在Docker上跑openwrt&lt;/h3&gt;
&lt;p&gt;参考: &lt;a class=&#34;link&#34; href=&#34;http://jimway.blogspot.com/2021/04/openwrt-info.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;openwrt info&lt;/a&gt;&lt;br&gt;
相关信息:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://githubmemory.com/repo/unifreq/openwrt_packit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flippy 的 Openwrt 打包源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.right.com.cn/forum/thread-958173-1-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flippy的openwrt 4 docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/r/unifreq/openwrt-aarch64&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flippy的openwrt4docker源: unifreq/openwrt-aarch64&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;openwrt-for-docker下载flippy版本&#34;&gt;openwrt for docker下载(flippy版本):&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker pull unifreq/openwrt-aarch64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;运行openwrt-for-docker注意这里并不需要设置网络&#34;&gt;运行openwrt for docker(注意:这里并不需要设置网络):&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;# 这里要使用固定ip地址(用&amp;ndash;ip参数设置), ip段看ifconfig中docker的网段, 地址放在较后位置,避免被占&lt;br&gt;
# 直接使用&amp;ndash;ip参数的方式, &lt;strong&gt;测试失败!&lt;/strong&gt;&lt;br&gt;
&lt;del&gt;# docker run &amp;ndash;restart always &amp;ndash;name openwrt -p 80:80 &amp;ndash;ip 172.17.0.199 -d &amp;ndash;privileged unifreq/openwrt-aarch64&lt;/del&gt;&lt;br&gt;
# 要先建立一个docker的静态network, 自定网段, 但不要与现有docker网段(172.17.0.0/16)冲突&lt;br&gt;
# docker network create &amp;ndash;subnet=192.168.188.0/24 staticnet&lt;br&gt;
# 建立docker network后, 可以使用docker network ls查看新建的network&lt;br&gt;
# 启动openwrt, 设置使用静态地址&lt;br&gt;
# docker run &amp;ndash;restart always &amp;ndash;name openwrt -p 80:80 &amp;ndash;net staticnet &amp;ndash;ip 192.168.188.188 -d &amp;ndash;privileged unifreq/openwrt-aarch64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;另外还有使用macvlan的方法,如:&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/lisaac/blog/issues/4&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;ldquo;docker 中运行 openwrt: 利用 macvlan 方式创建虚拟接口进行配置&amp;rdquo;&lt;/a&gt;&lt;br&gt;
但macvlan方式要使用混杂模式, 搞得有点复杂的感觉, 所以放弃&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;配置openwrt-in-docker&#34;&gt;配置openwrt in Docker&lt;/h4&gt;
&lt;p&gt;先进入portainer查看openwrt运行的容器地址,这里是&lt;del&gt;172.17.0.3&lt;/del&gt; 192.168.188.188&lt;br&gt;
进入openwrt容器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker exec -it openwrt /bin/bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;临时手动修改openwrt内部地址:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;docker# ifconfig br-lan 172.17.0.3 netmask 255.255.255.0&lt;/del&gt;&lt;br&gt;
docker# ifconfig br-lan 192.168.188.188 netmask 255.255.255.0&lt;br&gt;
# 设置网关&lt;br&gt;
&lt;del&gt;docker# route add default gw 172.17.0.1&lt;/del&gt;&lt;br&gt;
docker# route add default gw 192.168.188.1&lt;br&gt;
#修改完成后,查看状态&lt;br&gt;
&lt;del&gt;docker# wget http://172.17.0.3&lt;/del&gt;&lt;br&gt;
docker# wget http://192.168.188.188&lt;br&gt;
# 如果能看到回应表明容器内部运行正常&lt;br&gt;
docker# wget http://192.168.1.8&lt;br&gt;
# 上面地址是armbian网卡地址, 如果能看到回应, 表明容器端口映射出来也正常&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再在另一台windows机器上,用浏览器打开http://192.168.1.8,如果能看到openwrt界面,则手动设置成功.&lt;br&gt;
&lt;u&gt;再使用浏览器进入openwrt,设置网卡地址信息(设置为容器分配的地址)(手动设置完成后,下次重启又会回到最初状态, 需要用luci设置并保存配置)&lt;/u&gt;&lt;br&gt;
Openwrt的网络配置文件是/etc/config/network, 也许手动修改配置文件也可以.&lt;/p&gt;
&lt;h5 id=&#34;另-在docker版本的openwrt里同样可以用etccoremarksh获取设备性能数据&#34;&gt;另: 在Docker版本的openwrt里,同样可以用/etc/coremark.sh获取设备性能数据&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker# /etc/coremark.sh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于地址设定:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于docker的启动顺序不同，容器可能会在多次启动时获得不同的地址，所以需要使用static方式指定容器ip。&lt;/li&gt;
&lt;li&gt;还有一种方式，建立macvlan来做通讯，这样方式还需要主设备网卡打开混杂模式，比较麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经测试, openwrt可以在armbian系统重启后自动启动; 在openwrt容器里(docker exec -it openwrt bash进入)halt关机后, 也会自动重启.&lt;/p&gt;
&lt;h3 id=&#34;在armbian上安装其它服务&#34;&gt;在Armbian上安装其它服务&lt;/h3&gt;
&lt;h4 id=&#34;安装samba服务&#34;&gt;安装Samba服务&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 注: 不要用armbian-config安装, 安装后找不到/etc/init.d/smbd,  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 却多一个/etc/init.d/samba-ad-dc  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# apt-get udpate  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# samba是samba服务器, cifs-utils是Windows共享(可不装), sambaclient是samba客户端(也可不装)  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# apt-get install samba cifs-utils sambaclient  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;配置samba&#34;&gt;配置samba:&lt;/h5&gt;
&lt;p&gt;修改配置文件/etc/samba/smb.conf(最后的文件如下, 并确认可用_包括Win10/Es文件浏览器 on 安卓手机_&lt;u&gt;安卓手机上也会提示输入用户名密码&lt;/u&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[global]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        workgroup = WORKGROUP  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        server string = %h server  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        hosts allow = 192.168.1.  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        log file = /var/log/samba/log.%m  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        max log size = 1000  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        syslog = 0  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        panic action = /usr/share/samba/panic-action %d  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        load printers = yes  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        printing = cups  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        printcap name = cups  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        min receivefile size = 16384  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        write cache size = 524288  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        getwd cache = yes  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        socket options = TCP_NODELAY IPTOS_LOWDELAY  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[printers]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        comment = All Printers  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        path = /var/spool/samba  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        browseable = no  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        public = yes  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        guest ok = yes  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        writable = no  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        printable = yes  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        printer admin = XXXXXXX  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[print$]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        comment = Printer Drivers  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        path = /etc/samba/drivers  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        browseable = yes  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        guest ok = no  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        read only = yes  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        write list = XXXXXXX  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[Share]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        comment = Share_AmlR3300l  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        path = /mnt/ext/share  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        writable = yes  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        public = no  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        valid users = XXXXXXX  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        force create mode = 0644  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 用smbpasswd设置用户密码
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# * 先用adduser增加smb用户同名linux系统用户  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# * 再用smbpasswd -a增加smb用户, 并设置用户密码
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# smbpasswd -a XXXXXXX  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;u&gt;注: 找不到smbpasswd文件, 但samba用户是可用的&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;重启samba后生效&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# service smbd restart&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;u&gt;注: 在测试中, (老MacBook笔记本连无线桥接路由wifi)用samba方式往R3300L(网线连接到主路由)上拷大文件(8G不到)出现了死机现象,表现为SecureCrt上操作无反应,直接在R3300L上操作也差不多.&lt;/u&gt;&lt;br&gt;
&lt;u&gt;后来用SecureCrt上sftp方式向R3300L拷贝同样的大文件, 显示传输速率只有450KB/s(上传)/1700KB/s(下载)&lt;/u&gt;&lt;br&gt;
不能确定瓶颈在哪:&lt;br&gt;
网络测试过(xWin下用Arora浏览器访问speedtest), 差不多能到百兆;&lt;br&gt;
tf卡读写速度也测过(hdparm -T), 读能到750MB/sec以上, 写也能到20MB/sec以上&lt;br&gt;
&lt;strong&gt;大文件可能只能用U盘拷了!&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;R3300L这盒子硬件和Q7差不多, 同样也是有缺陷的.&lt;/u&gt;&lt;br&gt;
&lt;u&gt;另: 用Redmi K30手机连samba服务器, (使用同样的无线桥接路由器的wifi)上传能到1.5MB/s以上, 下载能到接近5MB/s&lt;/u&gt;&lt;/p&gt;
&lt;h4 id=&#34;为scanner增加一个共享-添加独立的用户-并分配相应的权限&#34;&gt;为scanner增加一个共享, 添加独立的用户, 并分配相应的权限&lt;/h4&gt;
&lt;p&gt;操作:&lt;/p&gt;
&lt;h5 id=&#34;增加共享scannershare&#34;&gt;增加共享ScannerShare&lt;/h5&gt;
&lt;p&gt;在原/etc/samba/smb.conf最后增加:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ScannerShare]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        comment = ScannerShare_AmlR3300l  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        path = /mnt/ext/scannershare  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        guest ok = yes  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        writable = yes  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        public = yes  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        valid users = XXXXXXX, scanner  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        force create mode = 0644  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;相应的增加共享目录mntextscannershare&#34;&gt;相应的增加共享目录/mnt/ext/scannershare&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;# mkdir /mnt/ext/scannershare&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;增加samba用户scanner&#34;&gt;增加(samba)用户scanner&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# useradd scanner  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# smbpasswd -a scanner  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# (设置密码)  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# vim /etc/passwd  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# (把scanner设置为nologin)  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;为scannershare设置有效用户&#34;&gt;为ScannerShare设置有效用户&lt;/h5&gt;
&lt;p&gt;已设置valid users&lt;/p&gt;
&lt;h5 id=&#34;设置完成-重启samba服务&#34;&gt;设置完成, 重启samba服务&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;# service smbd restart&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;安装minidlna服务&#34;&gt;安装miniDLNA服务&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;# apt-get udpate&lt;br&gt;
# apt-get install minidlna&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;配置minidlna&#34;&gt;配置miniDLNA:&lt;/h5&gt;
&lt;p&gt;修改配置文件/etc/minidlna.conf中的媒体目录, 如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;media_dir=/mnt/ext/share/media&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重启miniDLNA后生效&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# service minidlna restart&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注: 当前miniDLNA版本为1.2.1, 缺省不支持rmvb格式文件, 需要修改源代码并重新编译, 参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/JOYIST/article/details/79191765&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MiniDLNA 1.2.1编译 添加对rmvb格式的支持&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;在armbian上安装配置hugo服务器&#34;&gt;在Armbian上安装配置Hugo(?)服务器&lt;/h3&gt;
&lt;p&gt;参考: &lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/126298572&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何用hugo 搭建博客&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;完整安装说明: &lt;a class=&#34;link&#34; href=&#34;https://jimway71.github.io/p/%E5%9C%A8r3300l%E7%B1%BB-armbian%E4%B8%8A%E5%AE%89%E8%A3%85hugo%E6%9C%8D%E5%8A%A1%E5%99%A8/&#34; &gt;在R3300L类+Armbian上安装Hugo服务器&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Armbian(ubuntu on Arm)所用apt下载的hugo版本较低(ubuntu的惯例?), &lt;a class=&#34;link&#34; href=&#34;https://link.zhihu.com/?target=https%3A//themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hugo博客的主题&lt;/a&gt;中的&lt;a class=&#34;link&#34; href=&#34;https://link.zhihu.com/?target=https%3A//themes.gohugo.io/hugo-theme-bootstrap4-blog/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;bootstrap4-blog 主题&lt;/a&gt;就不支持, 所以需要下载&lt;a class=&#34;link&#34; href=&#34;https://link.zhihu.com/?target=https%3A//github.com/gohugoio/hugo/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hugo 的github 仓库&lt;/a&gt;中的最新deb包, 使用dpkg命令进行安装.&lt;br&gt;
R3300l所用Amlogic S905L支持arm64, 所装的Armbian应该是64位的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# uname -a&lt;br&gt;
Linux AmlR3300l 5.3.0-aml-g12 #5.97 SMP PREEMPT Mon Sep 23 14:33:30 MSK 2019 aarch64 aarch64 aarch64 GNU/Linux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以应该选用64位版本的Hugo, 当前最新版本为&lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio/hugo/releases/download/v0.82.1/hugo_0.82.1_Linux-ARM64.deb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hugo_0.82.1_Linux-ARM64.deb&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 下载hugo官方包  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# wget https://github.com/gohugoio/hugo/releases/download/v0.82.1/hugo_0.82.1_Linux-ARM64.deb  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 使用dpkg安装已下载的hugo的deb包  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# dpkg -i hugo_0.82.1_Linux-ARM64.deb  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 查看hugo版本, 以检测安装hugo是否成功  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# hugo version  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo v0.82.1-60618210 linux/arm64 BuildDate=2021-04-20T11:02:50Z VendorInfo=gohugoio  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 建立hugo博客的根目录(应该可以放多个博客)  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# mkdir /mnt/ext/hugo  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 进入这个目录  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# cd /mnt/ext/hugo  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 新建一个博客(目录)  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# hugo new site blog  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 进入博客目录  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# cd blog  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 下载[bootstrap4-blog 主题](https://link.zhihu.com/?target=https%3A//themes.gohugo.io/hugo-theme-bootstrap4-blog/)到这个博客目录  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# git clone https://github.com/alanorth/hugo-theme-bootstrap4-blog.git themes/hugo-theme-bootstrap4-blog  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 将exampleSite 目录中的内容，复制到博客根目录blog中，在blog目录中执行命令：  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# cp themes/hugo-theme-bootstrap4-blog/exampleSite/* ./ -r  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 启动hugo服务: 绑定到eth0地址, 根url是eth0地址:1313端口  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# hugo server --bind 192.168.1.8 --baseURL=http://192.168.1.8:1313  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以从另一机器上的浏览器访问http://192.168.1.8:1313, 应该可以看到初始的网页.&lt;/p&gt;
&lt;p&gt;&lt;u&gt;初步的安装完成, 后面看下怎么使用.&lt;/u&gt;&lt;/p&gt;
&lt;h2 id=&#34;其它&#34;&gt;其它&lt;/h2&gt;
&lt;h3 id=&#34;取eth0网卡地址&#34;&gt;取eth0网卡地址&lt;/h3&gt;
&lt;p&gt;From &lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/xuezhangjun0121/article/details/83150019&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SHELL - shell 脚本获取本机ip并将ip复制给变量待用&lt;/a&gt; + &lt;a class=&#34;link&#34; href=&#34;https://bbs.huaweicloud.com/blogs/227483&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;shell脚本之通过脚本获取本机IP地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ifconfig eth0|grep inet|grep -v 127.0.0.1|grep -v inet6|awk &amp;lsquo;{print $2}&amp;rsquo;|tr -d &amp;ldquo;addr:&amp;rdquo;&lt;br&gt;
192.168.1.8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以简化为:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ifconfig eth0|grep inet|grep -v inet6|awk &amp;lsquo;{print $2}&amp;rsquo;|tr -d &amp;ldquo;addr:&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Openwrt相关资源</title>
        <link>https://jimway71.github.io/p/openwrt%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90/</link>
        <pubDate>Fri, 09 Apr 2021 08:56:16 +0800</pubDate>
        
        <guid>https://jimway71.github.io/p/openwrt%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90/</guid>
        <description>&lt;img src="https://jimway71.github.io/wallpaper/wallpaper-36.jpg" alt="Featured image of post Openwrt相关资源" /&gt;&lt;h1 id=&#34;openwrt&#34;&gt;OpenWrt&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://openwrt.org/&#34;  title=&#34;a Linux operating system targeting embedded devices&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenWrt&lt;/a&gt; OpenWrt官方代码网站&lt;/p&gt;
&lt;h2 id=&#34;openwrt-1&#34;&gt;OpenWrt&lt;/h2&gt;
&lt;h3 id=&#34;资源&#34;&gt;资源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://git.openwrt.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenWrt GIT&lt;/a&gt; OpenWrt官方代码仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;openwrt-for-tv-boxes&#34;&gt;OpenWrt for TV Boxes&lt;/h2&gt;
&lt;h3 id=&#34;资源-1&#34;&gt;资源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ophub/amlogic-s9xxx-openwrt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenWrt for Amlogic TV Boxes&lt;/a&gt; Github上为Amlogic电视盒子写的OpenWrt系统&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ophub/amlogic-s9xxx-armbian&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Armbian for Amlogic and Rockchip&lt;/a&gt; Github上为Amlogic和Rockchip写的Armbian系统&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ophub/luci-app-amlogic&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;luci-app-amlogic / Amlogic Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;openwrt-for-docker&#34;&gt;Openwrt for Docker&lt;/h2&gt;
&lt;h3 id=&#34;资源-2&#34;&gt;资源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://githubmemory.com/repo/unifreq/openwrt_packit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flippy 的 Openwrt 打包源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.right.com.cn/forum/thread-958173-1-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flippy的openwrt 4 docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/r/unifreq/openwrt-aarch64&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flippy的openwrt4docker源: unifreq/openwrt-aarch64&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运行&#34;&gt;运行&lt;/h3&gt;
&lt;h4 id=&#34;openwrt在docker下运行&#34;&gt;Openwrt在Docker下运行&lt;/h4&gt;
&lt;p&gt;执行命令:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker run --restart always --name openwrt -p 80:80 -d --privileged unifreq/openwrt-aarch64&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Armbian on TV box</title>
        <link>https://jimway71.github.io/p/armbian-on-tv-box/</link>
        <pubDate>Fri, 09 Apr 2021 08:54:16 +0800</pubDate>
        
        <guid>https://jimway71.github.io/p/armbian-on-tv-box/</guid>
        <description>&lt;img src="https://jimway71.github.io/wallpaper/wallpaper-35.png" alt="Featured image of post Armbian on TV box" /&gt;&lt;h2 id=&#34;参考&#34;&gt;参考:&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://forum.armbian.com/profile/1215-balbes150/&#34;  title=&#34;balbes150-&amp;gt;&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;balbes150&lt;/a&gt;活跃于&lt;a class=&#34;link&#34; href=&#34;https://forum.armbian.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Armbian官方(?)论坛&lt;/a&gt;, 他提供了支持部分非原厂支持设备的Armbian包, 如支持包括大部分S905系列芯片的Armbian image:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://forum.armbian.com/topic/12162-single-armbian-image-for-rk-aml-aw-aarch64-armv8/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Single Armbian image for RK + AML + AW (aarch64 ARMv8) By balbes150&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些安装说明:&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://forum.armbian.com/topic/17106-installation-instructions-for-tv-boxes-with-amlogic-cpus&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Installation Instructions for TV Boxes with Amlogic CPUs&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.ondroid.net/armbian-os-uenv-ini-and-extlinux-conf/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Armbian OS – uEnv.ini and extlinux.conf&lt;/a&gt; (2020更新后版本, 改用extlinux.conf+uboot.ext)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://forum.armbian.com/topic/10685-installation-guide-and-your-questions-answered-for-tv-boxes/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Installation Guide and your questions answered for TV Boxes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ethanblog.com/tips/install-latest-armbian-in-n1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;N1 盒子安装使用最新 Armbian 的记录&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/jonnyan/p/12660037.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;N1如何完美刷入armbian系统教程&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/milton/p/11883811.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;R3300L运行CoreELEC, EmuELEC和Armbian&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;armbian配置工具armbian-config&#34;&gt;Armbian配置工具armbian-config&lt;/h2&gt;
&lt;p&gt;Armbian系统提供armbian-config工具, 功能很丰富, 多数设置可以在这里完成&lt;/p&gt;
&lt;h2 id=&#34;操作&#34;&gt;操作&lt;/h2&gt;
&lt;h3 id=&#34;调整armbian启动盘tf卡上的ext4分区空间&#34;&gt;调整Armbian启动盘(TF卡)上的Ext4分区空间&lt;/h3&gt;
&lt;p&gt;Armbian安装到TF卡上后, 有两个分区, 128M*1 + 1.2G*1.&lt;br&gt;
第一次用这张TF卡启动时, 系统会自动扩展TF卡的第二个分区, 并会占满整张TF卡的剩余空间&lt;/p&gt;
&lt;p&gt;实际使用中, 希望能留一块独立的空间(分区), 这块空间windows能读写(考虑exfat格式), 即使Armbian系统坏了, 数据还能很方便的读取出来.&lt;/p&gt;
&lt;p&gt;测试方法① (在Armbian安装到TF卡上后)先占一块空间给exfat分区.&lt;br&gt;
操作:&lt;br&gt;
在TF卡的最后面分一块exfat分区, 希望第一次启动扩展分区时, 这个exfat分区不会受到影响.&lt;br&gt;
实际测试中, 发现分了这块exfat分区后, 第一次用这张TF卡启动时, 系统无法完成自动扩展分区.&lt;br&gt;
删除exfat分区后, 系统才自动完成扩展, 并且占满整个TF卡空间.&lt;br&gt;
方法①经测试, 确认失败。&lt;/p&gt;
&lt;p&gt;测试方法② &lt;strong&gt;无损调整EXT4分区大小&lt;/strong&gt;&lt;br&gt;
参考: &lt;a class=&#34;link&#34; href=&#34;https://blog.pinkd.moe/linux/2018/01/31/resize-a-ext4-partiton-safely&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;无损调整EXT4分区大小&lt;/a&gt;&lt;br&gt;
操作:&lt;br&gt;
先等系统用这张TF卡第一次启动, 并自动完成分区扩展;&lt;br&gt;
关机, 取出TF卡, 插到另一个linux(ubuntu类最好)机器上, 用该linux原系统启动, TF卡不做为启动盘(不需要始终是mount的状态);&lt;br&gt;
按下列命令操作:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 看分区  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# lsblk  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 检查需要调整的分区  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# e2fsck -f /dev/sda2  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 调整分区文件系统到5G.  注意: 需要配合下一步才能生效 _ 这里应该只是把用到的空间都挪到前面5G的空间去了, 但没有实际调整分区大小  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# resize2fs /dev/sda2 5G  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 进fdisk, 先删除sda2, 再重建5G大小的sda2  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# fdisk /dev/sda  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 删除原sda2  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): d  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command):  2  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 新建5G大小的sda2  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): n                        # 新建  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): 2                        # 第2分区  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): Sectors位置, sda1 End+1  # 起始sectors位置  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): +5G                      # 大小, 或结果secotrs位置: 这里写的是大小, 以+开始, +后面是要划分的空间大小(5G)  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): n                        # 发现ext4签名, 是否删除: N 不删除  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 顺便把exfat分区也建上...  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(command): w                        # 写盘退出  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 再检查一下，没有错误就说明没问题了  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# e2fsck -f /dev/sda1  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;结果: &lt;u&gt;成功&lt;/u&gt;&lt;br&gt;
先在windows上格式化了exfat分区, 确认读写都没有问题.&lt;br&gt;
然后用这张卡启动linux正常, 用fdisk查看分区也正常.&lt;br&gt;
&lt;strong&gt;确认使用无损调整EXT4分区大小的方法修改Armbian启动TF卡分区成功&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;armbian上安装docker&#34;&gt;Armbian上安装Docker&lt;/h3&gt;
&lt;p&gt;参考官网安装说明: &lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/get-docker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Get Docker&lt;/a&gt;&lt;br&gt;
一般用官方的shell安装.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Docker容器无法访问网络</title>
        <link>https://jimway71.github.io/p/docker%E5%AE%B9%E5%99%A8%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C/</link>
        <pubDate>Thu, 08 Apr 2021 01:17:16 +0800</pubDate>
        
        <guid>https://jimway71.github.io/p/docker%E5%AE%B9%E5%99%A8%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C/</guid>
        <description>&lt;img src="https://jimway71.github.io/wallpaper/wallpaper-33.jpg" alt="Featured image of post Docker容器无法访问网络" /&gt;&lt;h2 id=&#34;关于docker的网络模式&#34;&gt;关于Docker的网络模式&lt;/h2&gt;
&lt;p&gt;参考 &lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/huanongying123/article/details/73556634&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker的四种网络模式&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;现象&#34;&gt;现象&lt;/h2&gt;
&lt;p&gt;① 最初始现象是发现在docker容器中(的系统里)使用apt-get更新(update)时失败, 由于容器里没有ping等一系列工具软件, 无法确认问题具体情况。&lt;br&gt;
② 接着就找image里有ping的包, 用docker search发现pentest-tools里有, 但pull下来后发现运行错误, 报错信息如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;standard_init_linux.go:211: exec user process caused &amp;ldquo;exec format error&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查了下, 有人说是因为不兼容引起的错误:&lt;br&gt;
→ &lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/HermitSun/article/details/109145856&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;docker运行容器报错standard_init_linux.go:211: exec user process caused “exec format error“的可能解决办法&lt;/a&gt;&lt;br&gt;
③ 在查找中突然发现有说centos的image里有ping, 想着操作系统可能都会有整套网络工具软件, 就找了个ubutu的包pull下来, 结果里面还是没有.&lt;br&gt;
虽然centos不熟, 都是linux应该也差不太多, 回头就pull了centos.&lt;br&gt;
用docker运行并进入到容器里&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#  docker run -it centos /bin/bash  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[root@a688b8f2101e /]# ping 192.168.1.1  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PING 192.168.1.1 (192.168.1.1) 56(84) bytes of data.  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;^C  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--- 192.168.1.1 ping statistics ---  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2 packets transmitted, 0 received, 100% packet loss, time 26ms  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[root@a688b8f2101e /]# ping 192.168.1.7  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PING 192.168.1.7 (192.168.1.7) 56(84) bytes of data.  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;64 bytes from 192.168.1.7: icmp_seq=1 ttl=64 time=0.361 ms  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[root@a688b8f2101e /]# ping www.sina.com  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PING spool.grid.sinaedge.com (123.126.55.41) 56(84) bytes of data.  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;^C  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--- spool.grid.sinaedge.com ping statistics ---  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3 packets transmitted, 0 received, 100% packet loss, time 27ms  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;现象是除了本宿主机的IP(192.168.1.7), 其它地址都不能ping通&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[root@a688b8f2101e /]# tracepath www.sina.com  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 1?: [LOCALHOST]                      pmtu 1500  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 1:  119.167.237.233                                       2.100ms reached  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 1:  119.167.237.233                                       0.436ms reached  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     Resume: pmtu 1500 hops 1 back 1   
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;用tracepath跟踪路由也看不出什么&lt;br&gt;
测试的结果是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;除了本宿主机地址外, 其它地址都不能ping通&lt;/li&gt;
&lt;li&gt;虽然ping不通, 但是dns解析还是可以的.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;④ 怀疑是宿主机的防火墙挡住了, 把防火墙关了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# /etc/init.d/firewall stop&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再进入容器测试, 发现依然ping不通其它设备网址, 而且dns解析也不行了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[root@88a5cfa727dc /]# ping &lt;a class=&#34;link&#34; href=&#34;https://www.sina.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.sina.com&lt;/a&gt;&lt;br&gt;
ping: &lt;a class=&#34;link&#34; href=&#34;https://www.sina.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.sina.com&lt;/a&gt;: Name or service not known&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这只能说明, 宿主机的防火墙至少还帮着把DNS解析的包给双向转发了.&lt;br&gt;
问题不是要不要开防火墙, 而是防火墙必须得开, 但是防火墙的规则写的少了点东西.&lt;/p&gt;
&lt;h2 id=&#34;要不要处理&#34;&gt;要不要处理&lt;/h2&gt;
&lt;p&gt;本来如果凑合对付着用也行, 但看了下素版的wordpress好象东西还是有点少, 据说很多插件都需要从网上下载, 没法忍, 必须得处理这个问题.&lt;/p&gt;
&lt;h2 id=&#34;怎么处理&#34;&gt;怎么处理:&lt;/h2&gt;
&lt;p&gt;iptables我也不熟, 要不先来个简单的思路?&lt;br&gt;
① docker网络改用host模式&lt;br&gt;
Host模式说明： &lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/huanongying123/article/details/73556634&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker的四种网络模式&lt;/a&gt;&lt;br&gt;
如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口.&lt;br&gt;
这样就不会有包转发的问题了.&lt;br&gt;
在docker启动时, Host模式需要使用&amp;quot;&amp;ndash;network=host&amp;quot;参数.&lt;br&gt;
测试Host模式:&lt;br&gt;
还是用centos的包来做测试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# docker run --network=host -it centos /bin/bash  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[root@Q7Op /]# ping www.sina.com  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PING ww1.sinaimg.cn.w.alikunlun.com (119.167.237.230) 56(84) bytes of data.  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;64 bytes from 119.167.237.230 (119.167.237.230): icmp_seq=1 ttl=55 time=15.4 ms  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;64 bytes from 119.167.237.230 (119.167.237.230): icmp_seq=2 ttl=55 time=15.4 ms  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;64 bytes from 119.167.237.230 (119.167.237.230): icmp_seq=3 ttl=55 time=15.4 ms  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;64 bytes from 119.167.237.230 (119.167.237.230): icmp_seq=4 ttl=55 time=15.3 ms  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;^C  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--- ww1.sinaimg.cn.w.alikunlun.com ping statistics ---  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4 packets transmitted, 4 received, 0% packet loss, time 8ms  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rtt min/avg/max/mdev = 15.308/15.348/15.363/0.023 ms  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;网络就可以正常访问了.&lt;br&gt;
把现有的容器改成host模式:&lt;br&gt;
docker启动容器时, 如果不设置network模式, 容器就会以bridge模式运行.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在portainer.io(web管理)界面里, 试着把已经运行的bridge模式的容器改为host模式, 好像不行, 再试一下, 一样的报错:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;failure  container sharing cannot be connected to any other network&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即使暂停或停止容器, 也是报一样的错误.&lt;br&gt;
看来不可能简单的用管理界面搞定这个事.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网上有篇文章可能跟这有关: &lt;a class=&#34;link&#34; href=&#34;https://blog.51cto.com/jacksoner/2051041&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker网络管理-网络模式&lt;/a&gt;&lt;br&gt;
文章有点复杂,没看懂&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在portainer.io(web管理)界面里, 想用复制容器的方式, 在复制时, 修改网络为host模式.&lt;br&gt;
但是, 复制的容器就一直有问题, 试图连接时报错:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker exec -it WordPressHostNet /bin/bash&lt;br&gt;
Error response from daemon: Container 0dd20f7ed6587ba9900acbef9f7da926974c49bebc0fa076d19cbae573c5116c is restarting, wait until the container is running&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说是始终在重启状态&lt;br&gt;
web端口也连不上, 原因不清楚.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考: &lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/lei0213/p/12631681.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker第五篇（docker网络管理）&lt;/a&gt;&lt;br&gt;
两个方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker update &amp;ndash;network=host ……&lt;/li&gt;
&lt;li&gt;设置网桥，连接不同网段&lt;br&gt;
或者，docker有nat桥？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考: &lt;a class=&#34;link&#34; href=&#34;https://segmentfault.com/a/1190000019701533&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker 容器内无法通过 HTTP 访问外网&lt;/a&gt;&lt;br&gt;
和当前现象相似&lt;br&gt;
测试:&lt;br&gt;
① 参考 &lt;a class=&#34;link&#34; href=&#34;https://segmentfault.com/a/1190000019701533&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker 容器内无法通过 HTTP 访问外网&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# service dockerd stop  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# killall dockerd  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 检查点: 检查网络  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# ifconfig   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# ifconfig docker0 down  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# brctl delbr docker0  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# service dockerd start  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 检查点: 检查网络  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# ifconfig   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 测试:  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# docker run --rm -it centos /bin/bash  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;测试结果: &lt;u&gt;失败&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;② 参考 &lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/lei0213/p/12631681.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker第五篇（docker网络管理）&lt;/a&gt;, 用update改network&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# docker update --network=host -it e7d3c1eca2fb  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;unknown flag: --network  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;See &amp;#39;docker update --help&amp;#39;.  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;结果: update不支持修改network&lt;br&gt;
测试结果: &lt;u&gt;失败&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;③ 测试用已有的容器作镜像, 用host模式运行生成的镜像, 发现会自动退出&lt;br&gt;
再测试用wordpress以host模式运行, 也同样会自动退出&lt;br&gt;
原因可能是某个端口被宿主机占了, 谁知道&lt;br&gt;
结论: wordpress在当前系统上, 只能以bridge方式运行.&lt;/p&gt;
&lt;p&gt;看来应该是网桥的问题, 估计最终还是iptables的问题&lt;br&gt;
参考:  &lt;a class=&#34;link&#34; href=&#34;https://medium.com/@noosphere00/%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86linux%E8%AE%BE%E5%A4%87%E4%B8%8A%E7%9A%84bridge-%E7%BD%91%E6%A1%A5-%E5%92%8Cdocker-bridge-e6304a748f41&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何管理linux设备上的bridge(网桥)和docker bridge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;估计一时半会也搞不定了, 先准备手动安装wp包和插件吧:&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_26954773/article/details/62875366&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何手动安装WordPress主题和插件（Linux）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后记&lt;/strong&gt;: 放弃了使用WordPress服务器搭博客的方式。&lt;br&gt;
然而, 其实 . Docker下, 不管是host模式/bridge模式/container模式都不应该存在网络通讯的问题&amp;hellip;&amp;hellip;&lt;br&gt;
☻&lt;/p&gt;
</description>
        </item>
        <item>
        <title>在Docker环境下安装WordPress</title>
        <link>https://jimway71.github.io/p/%E5%9C%A8docker%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85wordpress/</link>
        <pubDate>Wed, 07 Apr 2021 14:44:16 +0800</pubDate>
        
        <guid>https://jimway71.github.io/p/%E5%9C%A8docker%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85wordpress/</guid>
        <description>&lt;img src="https://jimway71.github.io/wallpaper/wallpaper-32.png" alt="Featured image of post 在Docker环境下安装WordPress" /&gt;&lt;h2 id=&#34;安装环境&#34;&gt;安装环境&lt;/h2&gt;
&lt;p&gt;在数码视讯Q7上装了openwrt, 并已建好了Docker环境&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/zero_only/article/details/107567135&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;armbian装docker+wordpress实现https访问&lt;/a&gt;&lt;br&gt;
wordpress英文官网: &lt;a class=&#34;link&#34; href=&#34;https://wordpress.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wordpress.org/&lt;/a&gt;  (可能是)&lt;br&gt;
WordPress中文官网: &lt;a class=&#34;link&#34; href=&#34;https://cn.wordpress.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cn.wordpress.org/&lt;/a&gt;&lt;br&gt;
WordPress on GitHub: &lt;a class=&#34;link&#34; href=&#34;https://github.com/WordPress/WordPress&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/WordPress/WordPress&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;h3 id=&#34;安装数据库&#34;&gt;安装数据库&lt;/h3&gt;
&lt;p&gt;使用mariaDB数据库.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# 拉取mariadb镜像&lt;br&gt;
# docker pull mariadb&lt;br&gt;
# 运行数据库容器&lt;br&gt;
# docker run -d &amp;ndash;name DB4WordPress -p 3306:3306 -v /data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mariadb&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参数说明:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;--name: 容器名称，这里设置为DB4WordPress&lt;br&gt;
-p: 端口映射，宿主机的3306端口映射给容器的3306端口.第一个3306是宿主机(即物理机器)的端口，第二个是容器的端口&lt;br&gt;
-e: 环境变量. MYSQL_ROOT_PASSWORD, 设置root密码为123456&lt;br&gt;
-v: 指定数据卷，也就是将mariadb容器的/var/lib/mysql映射到宿主机的/data/mysql&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;检查是否运行:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker ps -a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;新建wordpress的库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# mysql -h 192.168.1.207 -u root -p&lt;br&gt;
Enter password:&lt;br&gt;
Welcome to the MariaDB monitor.  Commands end with ; or \g.&lt;br&gt;
Your MariaDB connection id is 12&lt;br&gt;
Server version: 10.5.9-MariaDB-1:10.5.9+maria~focal mariadb.org binary distribution&lt;br&gt;
Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.&lt;br&gt;
Type &amp;lsquo;help;&amp;rsquo; or &amp;lsquo;\h&amp;rsquo; for help. Type &amp;lsquo;\c&amp;rsquo; to clear the current input statement.&lt;/p&gt;
&lt;p&gt;MariaDB [(none)]&amp;gt; create database wordpress;&lt;br&gt;
Query OK, 1 row affected (0.001 sec)&lt;/p&gt;
&lt;p&gt;MariaDB [(none)]&amp;gt; quit&lt;br&gt;
Bye&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;安装wordpress&#34;&gt;安装WordPress&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;# 拉取wordpress镜像&lt;br&gt;
# docker pull wordpress&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;运行wordpress容器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker run -d &amp;ndash;name WordPress -p 1080:80 -e WORDPRESS_DB_HOST=192.168.1.207:3306 -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=123456 -e WORDPRESS_DB_NAME=wordpress wordpress&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参数说明:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WORDPRESS_DB_HOST : 链接的docker的MySQL的IP地址和端口，一般设置成mysql表示用默认的设置&lt;br&gt;
WORDPRESS_DB_USER : 指定数据库用户&lt;br&gt;
WORDPRESS_DB_PASSWORD : 指定数据库用户的密码，如果用户是root，那么要和之前启动数据库时的&amp;quot;MYSQL_ROOT_PASSWORD&amp;quot;相同。&lt;br&gt;
WORDPRESS_DB_NAME: 数据库名&lt;/p&gt;
&lt;p&gt;--link  链接到mariadb容器的名称(感觉这里用不着link)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;检查是否运行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker ps -a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用浏览器打开http://192.168.1.207:1080, 确认安装成功&lt;/p&gt;
&lt;h3 id=&#34;更改wordpress语言设置为中文&#34;&gt;更改WordPress语言设置为中文&lt;/h3&gt;
&lt;p&gt;参考: &lt;a class=&#34;link&#34; href=&#34;https://www.wpdaxue.com/wordpress-language-setting.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;更改WordPress语言设置（例如中文版和英文版转换）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: WordPress官方英文版不包含任何语言包, 包括Docker版本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;下载中文版wordpress&lt;br&gt;
在&lt;a class=&#34;link&#34; href=&#34;https://cn.wordpress.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WordPress中文官方网站&lt;/a&gt;下载&lt;a class=&#34;link&#34; href=&#34;https://cn.wordpress.org/latest-zh_CN.zip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;中文版本wordpress&lt;/a&gt;, 解压下载的压缩包.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把wp-content/下的languages目录整个拷到wordpress容器的/var/www/html/wp-content/目录下&lt;br&gt;
中文版的languages/目录下是中文相关的文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker cp languages/ WordPress:/var/www/html/wp-content/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个拷贝命令还不错, 是拷整个目录所有文件.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改wordpress容器中/var/www/html/wp-config.php, 加入中文语言设置&lt;br&gt;
由于容器里没有编译工具, 比如vi/vim/nano这类的, 所以要先拷到宿主机上, 编辑后再拷回去.&lt;br&gt;
先把文件wp-config.php从容器拷到宿主机&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker cp WordPress:/var/www/html/wp-config.php /tmp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在宿主机上用vim编辑wp-config.php文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# vim /tmp/wp-config.php&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;加入: define(&amp;lsquo;WPLANG&amp;rsquo;, &amp;lsquo;zh_CN&amp;rsquo;);&lt;br&gt;
由于原配置文件中没有WPLANG的设置, 不知道要放在哪里, 就直接放在第一大段注释说明后面了.&lt;br&gt;
编辑完后, 把改好的wp-config.php拷回到容器里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker cp /tmp/wp-config.php WordPress:/var/www/html/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用浏览器打开http://192.168.1.207:1080查看, 发现已经有&amp;quot;站点语言&amp;quot;选择(原来没有这项), 并且可以选择中文.&lt;br&gt;
&lt;img src=&#34;https://jimway71.github.io/img/32-wpondocker-01.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;修改后可以选择语言&#34;
	
	
&gt;&lt;br&gt;
↑ 修改后, 可以选择语言&lt;br&gt;
&lt;img src=&#34;https://jimway71.github.io/img/32-wpondocker-02.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;修改后可以选择语言&#34;
	
	
&gt;
↑ 修改前, 没有语言选择项&lt;/p&gt;
&lt;p&gt;&amp;ldquo;站点语言&amp;quot;选择&amp;quot;中文&amp;rdquo;, 并确认生效.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ⒺⓃⒹ&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Docker相关</title>
        <link>https://jimway71.github.io/p/docker%E7%9B%B8%E5%85%B3/</link>
        <pubDate>Tue, 06 Apr 2021 22:23:16 +0800</pubDate>
        
        <guid>https://jimway71.github.io/p/docker%E7%9B%B8%E5%85%B3/</guid>
        <description>&lt;img src="https://jimway71.github.io/wallpaper/wallpaper-31.jpg" alt="Featured image of post Docker相关" /&gt;&lt;h2 id=&#34;参考&#34;&gt;参考:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/ea4a00c6c21c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker run 命令参数及使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/wanghao_0206/article/details/79583325&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;docker设置容器固定ip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/47310fe571b5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;用Docker搭建WordPress博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/zero_only/article/details/107567135&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;armbian装docker+wordpress实现https访问&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://clownote.github.io/2020/03/16/blog/Docker-WordPress/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;用Docker部署WordPress&lt;/a&gt;&lt;br&gt;
WordPress连接数据库失败处理方法&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/f7c48fb5a563&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;基于docker搭建自己的个人网站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker-qa&#34;&gt;Docker Q&amp;amp;A&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看Docker容器环境变量&lt;br&gt;
标注说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CONTAINER-NAME: 容器名字&lt;/li&gt;
&lt;li&gt;CONTAINER-ID: 容器ID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用命令 Docker ps -a 可以查到上述信息&lt;br&gt;
有下列3种方式查看Docker容器环境变量:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Docker inspect&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker inspect &amp;lt;CONTAINER-NAME&amp;gt; OR &amp;lt;CONTAINER-ID&amp;gt;&lt;br&gt;
# 如:&lt;br&gt;
# docker inspect WordPressTest1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用env查看&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker exec -it &amp;lt;CONTAINER-NAME&amp;gt; OR &amp;lt;CONTAINER-ID&amp;gt; env&lt;br&gt;
# 如:&lt;br&gt;
# docker exec -it b14df65ecd73 env&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入容器后用env查看&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker exec -it &amp;lt;CONTAINER-NAME&amp;gt; OR &amp;lt;CONTAINER-ID&amp;gt; /bin/bash&lt;br&gt;
(容器提示符)# env&lt;br&gt;
# 如:&lt;br&gt;
# docker exec -it b14df65ecd73 /bin/bash&lt;br&gt;
(容器提示符)# env&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另: Docker使用&amp;ndash;link参数可以把另一个容器的环境变量连接过来(没有测试), 可以用env查看到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WordPress的Docker参数&lt;br&gt;
WordPress的Docker需要的参数是从环境变量里取得.&lt;br&gt;
读取代码在wordpress容器里的/var/www/html/wp-config.php文件, 相关的主要代码如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;// ** MySQL settings - You can get this info from your web host ** //&lt;br&gt;
/** The name of the database for WordPress */&lt;br&gt;
define( &amp;lsquo;DB_NAME&amp;rsquo;, getenv_docker(&amp;lsquo;WORDPRESS_DB_NAME&amp;rsquo;, &amp;lsquo;wordpress&amp;rsquo;) );&lt;/p&gt;
&lt;p&gt;/** MySQL database username */&lt;br&gt;
define( &amp;lsquo;DB_USER&amp;rsquo;, getenv_docker(&amp;lsquo;WORDPRESS_DB_USER&amp;rsquo;, &amp;rsquo;example username&amp;rsquo;) );&lt;/p&gt;
&lt;p&gt;/** MySQL database password */&lt;br&gt;
define( &amp;lsquo;DB_PASSWORD&amp;rsquo;, getenv_docker(&amp;lsquo;WORDPRESS_DB_PASSWORD&amp;rsquo;, &amp;rsquo;example password&amp;rsquo;) );&lt;/p&gt;
&lt;p&gt;/**&lt;br&gt;
*/&lt;/p&gt;
&lt;p&gt;/** MySQL hostname */&lt;br&gt;
define( &amp;lsquo;DB_HOST&amp;rsquo;, getenv_docker(&amp;lsquo;WORDPRESS_DB_HOST&amp;rsquo;, &amp;lsquo;mysql&amp;rsquo;) );&lt;/p&gt;
&lt;p&gt;/** Database Charset to use in creating database tables. */&lt;br&gt;
define( &amp;lsquo;DB_CHARSET&amp;rsquo;, getenv_docker(&amp;lsquo;WORDPRESS_DB_CHARSET&amp;rsquo;, &amp;lsquo;utf8&amp;rsquo;) );&lt;/p&gt;
&lt;p&gt;/** The Database Collate type. Don&amp;rsquo;t change this if in doubt. */&lt;br&gt;
define( &amp;lsquo;DB_COLLATE&amp;rsquo;, getenv_docker(&amp;lsquo;WORDPRESS_DB_COLLATE&amp;rsquo;, &amp;lsquo;&amp;rsquo;) );&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看到以下环境变量参数:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WORDPRESS_DB_NAME:              wordpress所用数据库名, 缺省为&amp;quot;wordpress&amp;quot;&lt;br&gt;
WORDPRESS_DB_USER:               wordpress访问数据库的用户名, 缺省为&amp;quot;example username&amp;quot;&lt;br&gt;
WORDPRESS_DB_PASSWORD:    wordpress访问数据库的用户密码, 缺省为&amp;quot;example password&amp;quot;&lt;br&gt;
WORDPRESS_DB_HOST:              wordpress访问的数据库地址端口(ip:port)&lt;br&gt;
WORDPRESS_DB_CHARSET:        数据库字符集&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要用到前4个参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker的重启&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# 重启docker&lt;br&gt;
# service dockerd restart&lt;/p&gt;
&lt;p&gt;# 重启容器，可通过portainer&lt;br&gt;
# 查看容器id和名称&lt;br&gt;
# docker ps -a&lt;br&gt;
# docker restart bc7c8d4514fe&lt;br&gt;
# 或&lt;br&gt;
# docker restart mydb&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;宿主机(即物理机)与docker文件互传&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# 宿主机传文件至docker容器&lt;br&gt;
# docker cp 本地文件的路径  container_id:&amp;lt;docker容器内的路径&amp;gt;&lt;/p&gt;
&lt;p&gt;# 容器传文件至宿主机&lt;br&gt;
# docker cp container_id:&amp;lt;docker容器内的路径&amp;gt;  &amp;lt;本地保存文件的路径&amp;gt;&lt;br&gt;
# 这里的容器ID可以通过portainer或者命令“docker ps -a ”进行查看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器里安装nano或vim&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# apt-get update&lt;br&gt;
# apt-get install nano&lt;br&gt;
# 或&lt;br&gt;
# apt-get install vim&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器自动启动&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在使用docker run时，添加&amp;quot;&amp;ndash;restart=always&amp;quot;参数&lt;/li&gt;
&lt;li&gt;运行中的docker使用update时添加&amp;quot;&amp;ndash;restart=always&amp;quot;参数&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker update &amp;ndash;restart=always wordpress&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ldquo;wordpress&amp;quot;是容器名称, 也可以写容器ID.&lt;br&gt;
例:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker update &amp;ndash;restart=always DB4WordPress&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DB4WordPress&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker update &amp;ndash;restart=always WordPress&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;WordPress&lt;br&gt;
关机重启后, 数据库和wordpress容器都已启动, 确认命令有效.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker镜像源&lt;br&gt;
参考: &lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/34d3b4568059&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker快速安装以及换镜像源&lt;/a&gt;&lt;br&gt;
Docker的镜像配置文件是: /etc/docker/daemon.json, 当前内容是:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;bip&amp;#34;: &amp;#34;192.168.30.1/24&amp;#34;,  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;data-root&amp;#34;: &amp;#34;/opt/docker/&amp;#34;,  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;log-level&amp;#34;: &amp;#34;warn&amp;#34;,  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;,  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;log-opts&amp;#34;: {  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &amp;#34;max-size&amp;#34;: &amp;#34;10m&amp;#34;,  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &amp;#34;max-file&amp;#34;: &amp;#34;5&amp;#34;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   },  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &amp;#34;registry-mirrors&amp;#34;: [  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &amp;#34;https://dockerhub.azk8s.cn&amp;#34;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   ]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;portainer在armbian上安装运行&lt;br&gt;
运行参考:  &lt;a class=&#34;link&#34; href=&#34;https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Deploying Portainer CE in Docker&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# (安装应该是使用docker pull: docker pull portainer/portainer-ce)&lt;br&gt;
# 安装使用apt-get&lt;br&gt;
# apt-get install portainer/portainer-ce&lt;br&gt;
# 启动&lt;br&gt;
# docker volume create portainer_data&lt;br&gt;
# docker run -d -p 8000:8000 -p 9000:9000 &amp;ndash;name=portainer &amp;ndash;restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看某个docker容器占用的ip&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# docker inspect openwrt | grep Address&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中“openwrt”是容器的名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;armbian上安装Docker&lt;br&gt;
参考官网安装说明: &lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/get-docker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Get Docker&lt;/a&gt;&lt;br&gt;
一般用官方的shell安装.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改地址(临时, openwrt)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ifconfig br-lan 172.17.0.3 netmask 255.255.255.0&lt;br&gt;
# 设置网关&lt;br&gt;
route add default gw 172.17.0.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker搜索镜像(img包)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# docker search 镜像包名, 如:  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# docker search hugo  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                                   DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;klakegg/hugo                           Minimal image and variants with batteries in…   99                   [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jojomi/hugo                            hugo, see https://gohugo.io                     64                   [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;monachus/hugo                          Docker image for building and running Hugo (…   42                   [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;publysher/hugo                         Docker base image for static sites generated…   38                   [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jguyomard/hugo-builder                 Lightweight Alpine-Based Docker Image for Hu…   19                   [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cibuilds/hugo                          Docker image for Hugo, the static-site gener…   15                     
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;fundor333/hugo                         Docker file for build your Hugo for my site …   4                    [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;peaceiris/hugo                         Hugo Alpine base Docker Image (Hugo extended…   4                      
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;solidnerd/hugo                         Hugo in a container                             2                    [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yanqd0/hugo                            The smallest hugo image built from Alpine.      2                    [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;muninn/hugo-caddy                      hugo + caddy + caddy hugo admin plugin + cad…   2                      
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tarampampam/hugo                       Hugo (gohugo, static stite generator) applic…   1                    [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;orus/hugo-builder                      Alpine with hugo, git and pygments installed…   1                      
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dettmering/hugo-build                  Build a website with Hugo (gohugo.io)           1                    [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envimate/hugo                          Dockerized version of hugo cli https://gohug…   1                      
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chabad360/hugo                         Build a static site with Hugo (includes Hugo…   0                      
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vergissberlin/hugo-docker-watchtower   Hugo with continues delivery after commits i…   0                      
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;simonszu/hugo                          An image for the hugo blog system               0                    [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;webhippie/hugo                         Docker images for Hugo                          0                    [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;toschwarz/hugo-builder                 Hugo Builder Image                              0                    [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;svlentink/hugo                         Official Hugo static web gen. from Github (l…   0                    [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mazgi/hugo-static-website              Docker image for static website by Hugo.        0                    [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sjugge/hugo                            Runs the latest stable Hugo static site gene…   0                    [OK]  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;forestryio/hugo                                                                        0                      
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;endocode/hugo-website                                                                  0   
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;*STARS越多越好(排在越靠前)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>在Openwrt上建立Docker环境</title>
        <link>https://jimway71.github.io/p/%E5%9C%A8openwrt%E4%B8%8A%E5%BB%BA%E7%AB%8Bdocker%E7%8E%AF%E5%A2%83/</link>
        <pubDate>Tue, 06 Apr 2021 18:06:16 +0800</pubDate>
        
        <guid>https://jimway71.github.io/p/%E5%9C%A8openwrt%E4%B8%8A%E5%BB%BA%E7%AB%8Bdocker%E7%8E%AF%E5%A2%83/</guid>
        <description>&lt;img src="https://jimway71.github.io/wallpaper/wallpaper-30.jpg" alt="Featured image of post 在Openwrt上建立Docker环境" /&gt;&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.right.com.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;恩山论坛&lt;/a&gt;的&lt;a class=&#34;link&#34; href=&#34;https://www.right.com.cn/forum/space-uid-285101.html&#34;  title=&#34;flippy-&amp;gt;&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;flippy大侠&lt;/a&gt;推出的&lt;a class=&#34;link&#34; href=&#34;https://www.right.com.cn/forum/thread-4076037-1-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;ldquo;55+、55+O S905x3、S922x、贝壳云、我家云、微加云等OP固件&amp;rdquo;&lt;/a&gt;内置了Docker CE容器(服务-Docker CE容器), 但Docker并不(缺省)可用.&lt;br&gt;
在Docker CE容器主页面下, 提供了内置的&amp;quot;Docker 初始化无脑配置教程&amp;quot;链接(一个PDF文件), 按照教程说明, 可以简单的把Docker环境搭建完成.&lt;br&gt;
&lt;img src=&#34;https://jimway71.github.io/img/30-q7-01.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Docker 初始化无脑配置教程&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;环境说明&#34;&gt;环境说明&lt;/h2&gt;
&lt;p&gt;在TF卡里装了&lt;a class=&#34;link&#34; href=&#34;https://www.right.com.cn/forum/space-uid-285101.html&#34;  title=&#34;flippy-&amp;gt;&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;flippy大侠&lt;/a&gt;的&lt;a class=&#34;link&#34; href=&#34;https://www.right.com.cn/forum/thread-4076037-1-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OP固件&lt;/a&gt;, 用这张TF卡插在联通(数码视讯)Q7盒子(以下简称Q7)里启动, op可以正常运行.&lt;br&gt;
TF卡中只用不到1G空间被op系统占用, 剩下的分成了一个exfat的主分区.&lt;/p&gt;
&lt;h2 id=&#34;操作步骤&#34;&gt;操作步骤&lt;/h2&gt;
&lt;p&gt;操作步骤大致按照&amp;quot;Docker 初始化无脑配置教程&amp;quot;, 但略有些不同.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;给Docker分配存储空间&lt;br&gt;
由于原来剩余空间都给了exfat主分区, 所以只能重新分配空间.&lt;br&gt;
本想通过调整分区大小来分出部分空间给Docker, 但试了Win10的&amp;quot;硬盘管理&amp;quot;+&amp;ldquo;分区助专业版&amp;rdquo;, 发现都不能把exfat分区的空间调小, 所以只能重新分配空间.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先备份exfat分区文件&lt;/li&gt;
&lt;li&gt;TF卡重新分区&lt;br&gt;
把TF卡插回Q7的TF卡槽, tf卡启动Q7后, 用SecureCRT登录进去:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用fdisk命令删除原exfat分区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用fdisk重分两个分区, 一个exfat分区, 一个ext4分区.&lt;br&gt;
考虑到Docker可能不会占用多少空间, 给ext4分了10G的空间.&lt;br&gt;
(exfat分区的类型代码是7)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;格式化(mkfs命令)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# 格式化exfat分区&lt;br&gt;
# mkfs.exfat /dev/sda3&lt;br&gt;
# 格式化ext4分区&lt;br&gt;
# mkfs.ext4 /dev/sda4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意: 如果分区已经mount上就不能格式化, 会显示格式化失败信息.&lt;br&gt;
这种情况需要umount, 如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# umount /dev/sda3&lt;br&gt;
&lt;img src=&#34;https://jimway71.github.io/img/30-q7-02.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;相应的教程内容, 执行的shell功能就是分区&amp;#43;格式化&#34;
	
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;↑ 相应的教程内容, 执行的shell功能就是分区+格式化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;挂载(mount)新分区&lt;br&gt;
把新的ext4分区挂载(mount)到/opt下, 做为Docker的空间.&lt;br&gt;
与mount有关的配置文件有/etc/mtab + /etc/fstab, /etc/fstab是启动时的挂载配置文件.&lt;br&gt;
&lt;img src=&#34;https://jimway71.github.io/img/30-q7-03.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;相应的教程内容, 实现新分区挂载到/opt&#34;
	
	
&gt;&lt;br&gt;
&lt;img src=&#34;https://jimway71.github.io/img/30-q7-04.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;相应的教程内容, 实现新分区挂载到/opt&#34;
	
	
&gt;&lt;br&gt;
&lt;img src=&#34;https://jimway71.github.io/img/30-q7-05.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;相应的教程内容, 实现新分区挂载到/opt&#34;
	
	
&gt;&lt;br&gt;
↑ 相应的教程内容, 实现新分区挂载到/opt&lt;br&gt;
按教程操作完成挂载后, 查看/etc/fstab文件, 并没有看到/opt的挂载信息, 不清楚具体是在哪里配置的.&lt;br&gt;
用mount命令查看, 可以看到已经挂载到/opt下了&lt;br&gt;
&lt;img src=&#34;https://jimway71.github.io/img/30-q7-06.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;分区挂载状态&#34;
	
	
&gt;&lt;/li&gt;
&lt;li&gt;把备份的exfat分区文件恢复回去.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确认Docker的配置文件&lt;br&gt;
修改/etc/docker/daemon.json, 把data-root改为/opt/docker/&lt;br&gt;
说明见文后的问题①&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装Docker管理系统&lt;br&gt;
/etc/docker-web是一个shell, 内容如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# cat /etc/docker-web&lt;br&gt;
#!/bin/sh&lt;br&gt;
docker run -d &amp;ndash;restart=always &amp;ndash;name=&amp;ldquo;portainer&amp;rdquo; -p 9999:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;docker-web是用来安装docker的web管理系统, 执行前需要先确认下docker是否已启动, 如果没有启动, docker-web的安装会失败, 如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ./docker-web&lt;br&gt;
docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.&lt;br&gt;
See &amp;lsquo;docker run &amp;ndash;help&amp;rsquo;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用service命令确认docker运行状态&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# service dockerd status&lt;br&gt;
inactive&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果发现docker未启动, 则先启动docker&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# service dockerd start&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再次确认docker运行状态&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# service dockerd status&lt;br&gt;
running&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;确认docker运行后, 可以执行docker-web进行安装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ./docker-web&lt;br&gt;
Unable to find image &amp;lsquo;portainer/portainer-ce:latest&amp;rsquo; locally&lt;br&gt;
latest: Pulling from portainer/portainer-ce&lt;br&gt;
84cfa456b2b1: Pull complete&lt;br&gt;
39d56ef0881a: Pull complete&lt;br&gt;
16a45878c700: Pull complete&lt;br&gt;
Digest:&lt;br&gt;
Status: Downloaded newer image for portainer/portainer-ce:latest&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入Docker管理界面&lt;br&gt;
在浏览器里输入Q7的ip地址:9999, 设置管理员密码, 选择local进入本地管理界面&lt;br&gt;
&lt;img src=&#34;https://jimway71.github.io/img/30-q7-07.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Docker管理界面&#34;
	
	
&gt;&lt;br&gt;
&lt;img src=&#34;https://jimway71.github.io/img/30-q7-08.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Docker管理界面&#34;
	
	
&gt;&lt;br&gt;
点鲸鱼图标即可管理本地的docker&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;① Docker的配置文件有问题, 需要修改&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# cat /etc/docker/daemon.json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;bip&amp;#34;: &amp;#34;172.31.0.1/24&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;data-root&amp;#34;: &amp;#34;/mnt/mmcblk2p4/docker/&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;log-level&amp;#34;: &amp;#34;warn&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;log-opts&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &amp;#34;max-size&amp;#34;: &amp;#34;10m&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &amp;#34;max-file&amp;#34;: &amp;#34;5&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   },
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &amp;#34;registry-mirrors&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &amp;#34;https://dockerhub.azk8s.cn&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   ]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中data-root所指/mnt/mmcblk2p4不存在, 由于给docker分配的空间是/opt, 因此考虑把data-root所指目录改到/opt/docker/下&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Q&amp;A</title>
        <link>https://jimway71.github.io/p/qa/</link>
        <pubDate>Sat, 03 Apr 2021 22:57:16 +0800</pubDate>
        
        <guid>https://jimway71.github.io/p/qa/</guid>
        <description>&lt;img src="https://jimway71.github.io/wallpaper/wallpaper-29.jpg" alt="Featured image of post Q&amp;A" /&gt;&lt;h2 id=&#34;问题-旧版securecrt不能连接新版本的sshd服务器&#34;&gt;问题: 旧版SecureCrt不能连接新版本的sshd服务器&lt;/h2&gt;
&lt;p&gt;报错如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Key exchange failed. No compatible key exchange method. The server supports these methods: curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原因分析:&lt;br&gt;
旧版SecureCrt(版本号6.7.0 (build 153))支持的密钥交换(Key exchange)为以下5种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kerberos&lt;/li&gt;
&lt;li&gt;Kerberos(Group Exchange)&lt;/li&gt;
&lt;li&gt;Diffie-hellman-group14&lt;/li&gt;
&lt;li&gt;Diffie-hellman-group&lt;/li&gt;
&lt;li&gt;Diffie-hellman&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这5种均不被新的sshd支持, 当前sshd版本信息为:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenSSH_8.3p1, OpenSSL 1.1.1j  16 Feb 2021&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;处理方式:&lt;br&gt;
修改/etc/ssh/sshd_config文件, 添加(我是在文件最后添加):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;KexAlgorithms diffie-hellman-group14-sha1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后重启sshd:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;#service sshd restart&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即可。&lt;br&gt;
(看参考的文档, 说的是添加:&lt;br&gt;
KexAlgorithms &lt;a class=&#34;link&#34; href=&#34;mailto:curve25519-sha256@libssh.org&#34; &gt;curve25519-sha256@libssh.org&lt;/a&gt;,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1&lt;br&gt;
其实添加一种SecureCrt支持的方式就可以了)&lt;br&gt;
参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/duanbiren123/article/details/103034914&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;升级ssh后续问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.tomato.cm/179.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;使用SecureCRT连接Ubuntu20.04报错：Key exchange failed. No compatible key exchange method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/shenjianyu/p/6407042.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;升级openssh带来的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;更新:&lt;/strong&gt;&lt;br&gt;
可以改用基于&lt;a class=&#34;link&#34; href=&#34;file:///C:/Users/jimway/AppData/Local/Temp/Mxt220/tmp/licenses/EulaHOME.html&#34; &gt;MobaXterm license&lt;/a&gt;许可的&lt;a class=&#34;link&#34; href=&#34;https://mobaxterm.mobatek.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MobaXterm&lt;/a&gt;, 不再有这种问题。&lt;/p&gt;
&lt;h2 id=&#34;问题-在openwrt上新建一个可用的samba用户&#34;&gt;问题: 在openwrt上新建一个可用的samba用户&lt;/h2&gt;
&lt;p&gt;需要解决的问题:&lt;br&gt;
需要新增一个samba用户, 而samba用户是与同名系统用户关联的, 所以需要先建立一个同名的系统用户.&lt;br&gt;
但是, 当前Openwrt的底层系统里没有useradd或者adduser命令, 用opkg update更新后, 搜索可用的包里也没找到相关的包, 包括有人提到的shadow-useradd或者类似的命令, 所以, 不能用命令添加一个用户&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;那, 就先手动来新增一个用户&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改/etc/passwd文件, 增加新用户信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# vim /etc/passwd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;增加一行:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;newuser:x:66666:66666:newuser:/home/newuser:/bin/ash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说明:&lt;br&gt;
newuser是用户名, /home/newuser就是newuser用户的根目录了.&lt;br&gt;
66666是用户ID, 要注意在整个passwd文件是应该是唯一的.&lt;br&gt;
/bin/ash是shell, 是从root用户那行抄来的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改/etc/group文件, 增加新用户的组信息: 组名和用户名一般都是相同的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# vim /etc/group&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;增加一行:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;newuser:x:66666:newuser&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说明:&lt;br&gt;
组名和用户名相同&lt;br&gt;
组ID号和用户ID号也相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立新用户根目录, 并设置属主/组&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# mkdir /home/newuser&lt;br&gt;
# chown newuser /home/newuser&lt;br&gt;
# chgrp newuser /home/newuser&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给新用户设置密码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# passwd newuser&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该设置samba用户了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;给samba新用户设置密码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;# smbpasswd newuser&lt;/del&gt;&lt;br&gt;
&lt;del&gt;&amp;hellip;&amp;hellip;&lt;/del&gt;&lt;br&gt;
&lt;del&gt;Failed to find entry for user newuser.&lt;/del&gt;&lt;br&gt;
# smbpasswd -a newuser&lt;br&gt;
&amp;hellip;&amp;hellip;&lt;br&gt;
Added user newuser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使samba新用户可用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# smbpasswd -e newuser&lt;br&gt;
Enabled user newuser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;问题-在openwrt上设置samba服务器-windowswin10es文件浏览器都可以通过网络访问&#34;&gt;问题: 在openwrt上设置samba服务器, Windows/Win10/Es文件浏览器都可以通过网络访问.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;环境说明:&lt;/strong&gt;&lt;br&gt;
用S905L的盒子装了个openwrt, 装在TF卡上, 用TF卡启动.&lt;br&gt;
TF卡上除了装op系统的大概1G空间外, 剩下的空间分区并格式化为exfat格式, op启动时会自动加载这个exfat分区, 使用samba(web上在网络存储-网络共享)共享出来可供局域网内设备访问.&lt;br&gt;
Win10当前版本缺省不支持SMB 1.0/CIFS, 为了访问低版本的samba设备, 已通过&amp;quot;启用或关闭Windows功能&amp;quot;打开&amp;quot;SMB 1.0/CIFS文件共享支持&amp;quot;+&amp;ldquo;SMB Direct&amp;rdquo;, 需要能让这种设备访问盒子上的samba服务器 - 其实这并不是一个问题, 当前版本的samba(V4.11.6)早已支持新版本的samba协议.&lt;br&gt;
安卓手机app&amp;quot;Es文件管理器&amp;quot;也需要在局域网内能访问同一个samba服务器.&lt;br&gt;
&lt;strong&gt;问题详述:&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;问题1. linux上的samba服务器与Windows的Samba服务器是有区别的&lt;/u&gt;&lt;br&gt;
Windows的samba服务器被访问时, 如果需要用户登录, 会在开始连接时就要求登录.&lt;br&gt;
而Linux的samba服务器被访问时, 只有当访问到&amp;quot;共享目录&amp;quot;时, 才会问到登录信息.&lt;br&gt;
&lt;u&gt;问题2. 当前版本的Win10在访问samba服务时, 已经不支匿名访问, 只能修改注册表信息来支持&lt;/u&gt;&lt;br&gt;
这个操作比较麻烦, 不考虑&lt;br&gt;
测试中发现, 当一个samba服务器里只要存在任何一个可以匿名访问的文件共享, Win10就无法访问整个Samba服务器, 因此要求samba服务器中的任何共享都是非匿名访问的.&lt;br&gt;
&lt;u&gt;问题3 Es文件管理器App访问linux上的Samba服务器时, 缺省是以匿名方式访问&lt;/u&gt;&lt;br&gt;
不会主动弹出登录信息窗口, 即使无法打开一个需要登录的共享时, 也不会主动弹出.&lt;br&gt;
这就需要手动设置Es的登录信息.&lt;br&gt;
这个问题和问题1有相关性.&lt;br&gt;
&lt;strong&gt;其他&lt;/strong&gt;&lt;br&gt;
由于exfat是微软的文件格式, 没有用户权限信息, 避开了linux复杂的权限问题, 因此选择使用这种文件格式&lt;br&gt;
&lt;strong&gt;结论:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;op上的samba共享都需要设置成用户登录访问&lt;/li&gt;
&lt;li&gt;Es访问时需要手动设置用户登录信息.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Samba服务器的设置如下&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;配置文件&lt;br&gt;
op上luci的缺省配置文件如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[global]&lt;br&gt;
netbios name = |NAME|&lt;br&gt;
interfaces = |INTERFACES|&lt;br&gt;
server string = |DESCRIPTION|&lt;br&gt;
unix charset = |CHARSET|&lt;br&gt;
workgroup = |WORKGROUP|&lt;/p&gt;
&lt;p&gt;## This global parameter allows the Samba admin to limit what interfaces on a machine will serve SMB requests.&lt;br&gt;
bind interfaces only = yes&lt;/p&gt;
&lt;p&gt;## time for inactive connections to-be closed in minutes&lt;br&gt;
deadtime = 15&lt;/p&gt;
&lt;p&gt;## disable core dumps&lt;br&gt;
enable core files = no&lt;/p&gt;
&lt;p&gt;## set security (auto, user, domain, ads)&lt;br&gt;
security = user&lt;/p&gt;
&lt;p&gt;## This parameter controls whether a remote client is allowed or required to use SMB encryption.&lt;br&gt;
## It has different effects depending on whether the connection uses SMB1 or SMB2 and newer:&lt;br&gt;
## If the connection uses SMB1, then this option controls the use of a Samba-specific extension to the SMB protocol introduced in Samba 3.2 that makes   use of the Unix extensions.
server min protocol = NT1&lt;br&gt;
client min protocol = NT1&lt;br&gt;
## If the connection uses SMB2 or newer, then this option controls the use of the SMB-level encryption that is supported in SMB version 3.0 and above and available in Windows 8 and newer.&lt;br&gt;
## (default/auto,desired,required,off)&lt;br&gt;
#smb encrypt = default&lt;/p&gt;
&lt;p&gt;## set invalid users&lt;br&gt;
invalid users = root&lt;/p&gt;
&lt;p&gt;## map unknow users to guest&lt;br&gt;
map to guest = Bad User&lt;/p&gt;
&lt;p&gt;## allow client access to accounts that have null passwords.&lt;br&gt;
null passwords = yes&lt;/p&gt;
&lt;p&gt;## The old plaintext passdb backend. Some Samba features will not work if this passdb backend is used. (NOTE: enabled for size reasons)&lt;br&gt;
## (tdbsam,smbpasswd,ldapsam)&lt;br&gt;
passdb backend = smbpasswd&lt;/p&gt;
&lt;p&gt;## Set location of smbpasswd (&amp;lsquo;smbd -b&amp;rsquo; will show default compiled location)&lt;br&gt;
#smb passwd file = /etc/samba/smbpasswd&lt;/p&gt;
&lt;p&gt;## LAN/WAN options (IPTOS_LOWDELAY TCP_NODELAY) WAN (IPTOS_THROUGHPUT)&lt;br&gt;
socket options = IPTOS_LOWDELAY TCP_NODELAY&lt;/p&gt;
&lt;p&gt;## If this integer parameter is set to a non-zero value, Samba will read from files asynchronously when the request size is bigger than this value.&lt;br&gt;
## Note that it happens only for non-chained and non-chaining reads and when not using write cache.&lt;br&gt;
## The only reasonable values for this parameter are 0 (no async I/O) and 1 (always do async I/O).&lt;br&gt;
## (1/0)&lt;br&gt;
#aio read size = 0&lt;br&gt;
#aio write size = 0&lt;/p&gt;
&lt;p&gt;## If Samba has been built with asynchronous I/O support, Samba will not wait until write requests are finished before returning the result to the client for files listed in this parameter.&lt;br&gt;
## Instead, Samba will immediately return that the write request has been finished successfully, no matter if the operation will succeed or not.&lt;br&gt;
## This might speed up clients without aio support, but is really dangerous, because data could be lost and files could be damaged.&lt;br&gt;
#aio write behind = /*.tmp/&lt;/p&gt;
&lt;p&gt;## lower CPU useage if supported and aio is disabled (aio read size = 0 ; aio write size = 0)&lt;br&gt;
## currently broken (NOTE: see &lt;a class=&#34;link&#34; href=&#34;https://bugzilla.samba.org/show_bug.cgi?id=14095&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugzilla.samba.org/show_bug.cgi?id=14095&lt;/a&gt; )&lt;br&gt;
## (no, yes)&lt;br&gt;
#use sendfile = yes&lt;/p&gt;
&lt;p&gt;## samba will behave as previous versions of Samba would and will fail the lock request immediately if the lock range cannot be obtained.&lt;br&gt;
#blocking locks = No&lt;/p&gt;
&lt;p&gt;## disable loading of all printcap printers by default (iprint, cups, lpstat)&lt;br&gt;
load printers = No&lt;br&gt;
printcap name = /dev/null&lt;/p&gt;
&lt;p&gt;## Enabling this parameter will disable Samba&amp;rsquo;s support for the SPOOLSS set of MS-RPC&amp;rsquo;s.&lt;br&gt;
disable spoolss = yes&lt;/p&gt;
&lt;p&gt;## This parameters controls how printer status information is interpreted on your system.&lt;br&gt;
## (BSD, AIX, LPRNG, PLP, SYSV, HPUX, QNX, SOFTQ)&lt;br&gt;
printing = bsd&lt;/p&gt;
&lt;p&gt;## Disable that nmbd is acting as a WINS server for unknow netbios names&lt;br&gt;
#dns proxy = No&lt;/p&gt;
&lt;p&gt;## win/unix user mapping backend&lt;br&gt;
#idmap config * : backend = tdb&lt;/p&gt;
&lt;p&gt;## Allows the server name that is advertised through MDNS to be set to the hostname rather than the Samba NETBIOS name.&lt;br&gt;
## This allows an administrator to make Samba registered MDNS records match the case of the hostname rather than being in all capitals.&lt;br&gt;
## (netbios, mdns)&lt;br&gt;
mdns name = mdns&lt;/p&gt;
&lt;p&gt;## Clients that only support netbios won&amp;rsquo;t be able to see your samba server when netbios support is disabled.&lt;br&gt;
#disable netbios = Yes&lt;/p&gt;
&lt;p&gt;## Setting this value to no will cause nmbd never to become a local master browser.&lt;br&gt;
#local master = no&lt;/p&gt;
&lt;p&gt;## (auto, yes) If this is set to yes, on startup, nmbd will force an election, and it will have a slight advantage in winning the election. It is recommended that this parameter is used in conjunction with domain master = yes, so that nmbd can guarantee becoming a domain master.&lt;br&gt;
#preferred master = yes&lt;/p&gt;
&lt;p&gt;## (445 139) Specifies which ports the server should listen on for SMB traffic.&lt;br&gt;
## 139 is netbios/nmbd&lt;br&gt;
#smb ports = 445 139&lt;/p&gt;
&lt;p&gt;## This is a list of files and directories that are neither visible nor accessible.&lt;br&gt;
## Each entry in the list must be separated by a &amp;lsquo;/&amp;rsquo;, which allows spaces to be included in the entry. &amp;lsquo;*&amp;rsquo; and &amp;lsquo;?&amp;rsquo; can be used to specify multiple files or directories as in DOS wildcards.&lt;br&gt;
veto files = /Thumbs.db/.DS_Store/._.DS_Store/.apdisk/&lt;/p&gt;
&lt;p&gt;## If a directory that is to be deleted contains nothing but veto files this deletion will fail unless you also set the delete veto files parameter to   yes.&lt;br&gt;
delete veto files = yes&lt;/p&gt;
&lt;p&gt;################ Filesystem and creation rules ################&lt;br&gt;
## reported filesystem type (NTFS,Samba,FAT)&lt;br&gt;
#fstype = FAT&lt;/p&gt;
&lt;p&gt;## Allows a user who has write access to the file (by whatever means, including an ACL permission) to modify the permissions (including ACL) on it.&lt;br&gt;
#dos filemode = Yes&lt;/p&gt;
&lt;p&gt;## file/dir creating rules&lt;br&gt;
#create mask = 0666&lt;br&gt;
#directory mask = 0777&lt;br&gt;
#force group = root&lt;br&gt;
#force user = root&lt;br&gt;
#inherit owner = windows and unix&lt;br&gt;
################################################################&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个配置文件只需要屏蔽 invalid users = root 这一句, 如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;#invalid users = root&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置samba用户&lt;br&gt;
使用&amp;quot;&lt;a class=&#34;link&#34; href=&#34;https://jimway71.github.io/p/qa/#%E9%97%AE%E9%A2%98-%E5%9C%A8openwrt%E4%B8%8A%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8F%AF%E7%94%A8%E7%9A%84samba%E7%94%A8%E6%88%B7&#34; &gt;在openwrt上新建一个可用的samba用户&lt;/a&gt;&amp;ldquo;的方法建立用户&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置共享目录(补记: 可能是在Luci的界面里)&lt;br&gt;
&lt;img src=&#34;https://jimway71.github.io/img/29-qa-01.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;设置共享目录&#34;
	
	
&gt;&lt;br&gt;
按上图方式设置共享目录, 允许用户是刚才设置的smb用户.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问&lt;br&gt;
Win10正常访问.&lt;br&gt;
Es文件浏览器App在局域网里设置相应服务器的登录信息后就可以正常访问.&lt;br&gt;
读写都没有问题.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;emuelec2020春节整合版s905-被百毒封了&#34;&gt;EmuELEC2020春节整合版(s905) 被百毒封了&lt;/h2&gt;
&lt;p&gt;EmuELEC 3.3.1 2020春节整合版详细说明: &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/read/cv4420521/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.bilibili.com/read/cv4420521/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;下载地址：&lt;/u&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.189.cn/t/F7JfYbF7VnU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;EmuELEC2020春节整合版(s905) 被百毒封了&lt;/a&gt;  (访问码:nlp7) -&amp;gt; 已经转&lt;a class=&#34;link&#34; href=&#34;https://cloud.189.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;天翼云&lt;/a&gt; 需要的请下载&lt;a class=&#34;link&#34; href=&#34;https://space.bilibili.com/97745521&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@人中日月&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基础包链接：&lt;a class=&#34;link&#34; href=&#34;https://pan.baidu.com/s/1s03OQf60qQCmH8dejykplw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pan.baidu.com/s/1s03OQf60qQCmH8dejykplw&lt;/a&gt; 提取码：g13u&lt;br&gt;
(三个增补包，分别是街机改版、ATOMISWAVE和NAOMI的整合包，需要自己另外根据EMUELEC使用指南里面的方法传到系统里。)&lt;/li&gt;
&lt;li&gt;增量包链接：&lt;a class=&#34;link&#34; href=&#34;https://pan.baidu.com/s/17xkfIu-Wg1CzKAq9sGrXIw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pan.baidu.com/s/17xkfIu-Wg1CzKAq9sGrXIw&lt;/a&gt; 提取码：zkdr&lt;/li&gt;
&lt;li&gt;斐讯N1补丁包链接：&lt;a class=&#34;link&#34; href=&#34;https://pan.baidu.com/s/1RaNq2VaWiPvxX-4q2cjs1A&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pan.baidu.com/s/1RaNq2VaWiPvxX-4q2cjs1A&lt;/a&gt; 提取码：pty4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外, 还有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vol4增量包, 应该是FBN街机的&lt;/li&gt;
&lt;li&gt;3.4版的更新包,更新emuelec到3.4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;问题-openwrt的history只能看到当前连接的命令记录&#34;&gt;问题: openwrt的history只能看到当前连接的命令记录&lt;/h2&gt;
&lt;p&gt;原因: op缺省使用的是ash, 这个轻量化的shell就是这样，除非改用别的shell, 比如bash&lt;br&gt;
处理:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装bash&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# opkg update &amp;amp; opkg install bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置用户使用bash&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# vim /etc/passwd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修改相应用户的shell为bash，并保存退出。&lt;br&gt;
登出并重新登录后新的shell生效&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# echo $SHELL&lt;br&gt;
/bin/bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看history&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# history&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应该能看到记录，登出再进，可以看到文件～/.bash_history(bash的history 记录文件)&lt;/p&gt;
&lt;h2 id=&#34;网络相关问题-内网互联&#34;&gt;网络相关问题: 内网互联&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://segmentfault.com/a/1190000016556569&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;frp 和 nginx 搭建一个内网穿透服务器&lt;/a&gt;&lt;br&gt;
网络结构: 外网nginx -&amp;gt; 外网frp server &amp;lt;-&amp;gt; 内网frp client -&amp;gt; 内网web&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.anquanke.com/post/id/231424&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;内网渗透代理之frp的应用与改造（一）&lt;/a&gt;&lt;br&gt;
相关的&lt;a class=&#34;link&#34; href=&#34;https://github.com/mstxq17/FrpProPlugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FrpProPlugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://hostloc.com/forum.php?mod=viewthread&amp;amp;tid=820833&amp;amp;extra=&amp;amp;page=2&amp;amp;mobile=2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;(rinetd YYDS)socat居然比iptab效率高&lt;/a&gt;&lt;br&gt;
我映象比较深的就是 iptables frp nginx socat haproxy rinetd&lt;br&gt;
因为我是转发到rdp然后看油管，稍微卡顿都可以很明显的感觉出来。rinetd很流畅，haproxy和frp可以勉强用用，其它的都是战五渣。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.v2ex.com/t/567570&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;自认为比 frp 更好用的内网穿透工具 nps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里列举了一些比较好用的开源的内网穿透工具，详细介绍一下各个软件工具的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;frp&lt;br&gt;
FRP 功能完整，主要采用 GO 语言实现，重量级的工具，服务端界面样式风格一般。&lt;br&gt;
配置繁琐，不同的协议需要配置不同的参数，采用文件存放数据，不支持数据库管理数据。&lt;/li&gt;
&lt;li&gt;holer&lt;br&gt;
轻量级的内网穿透工具，holer 服务端采用 Java 语言实现，服务端界面漂亮简洁。&lt;br&gt;
Holer 客户端采用了 Java 语言和 GO 语言实现了两种版本，支持几乎所有的 OS 平台。&lt;br&gt;
用到流行的微服务框架 springboot 和 Java 网络框架 netty。&lt;br&gt;
配置很简单，针对所有 TCP 协议只需在客户端设置一个 holer access key 即可。&lt;br&gt;
采用 MySQL 数据库统一管理数据。&lt;/li&gt;
&lt;li&gt;nps&lt;br&gt;
轻量级的内网穿透工具，完全采用 GO 语言实现，服务端界面漂亮简洁。&lt;br&gt;
支持的协议最广泛，配置稍简单，采用文件存放数据，不支持数据库管理数据。&lt;/li&gt;
&lt;li&gt;lanproxy&lt;br&gt;
轻量级的内网穿透工具，客户端采用 GO 语言和 Java 语言实现两种版本，采用了 Java 网络框架 netty，服务端界面体验较差。&lt;br&gt;
配置稍繁琐，采用文件存放数据，不支持数据库管理数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nasge.com/archives/48.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;内网穿透工具比较(ngrok,frp,lanproxy,goproxy,nps)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://doubibackup.com/wkcjzpyd-2.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;关于目前 GFW(墙) 的封锁方式TCP封锁(阻断)猜想&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;问题-ubuntu采用docker官方shell安装时报错&#34;&gt;问题: ubuntu采用Docker官方shell安装时报错&lt;/h2&gt;
&lt;p&gt;报错信息如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# curl -fsSL &lt;a class=&#34;link&#34; href=&#34;https://get.docker.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://get.docker.com&lt;/a&gt; -o get-docker.sh&lt;br&gt;
# sh get-docker.sh&lt;br&gt;
# Executing docker install script, commit: 7cae5f8b0decc17d6571f9f52eb840fbc13b2737&lt;br&gt;
+ sh -c apt-get update -qq &amp;gt;/dev/null&lt;br&gt;
W: The repository &amp;lsquo;cdrom://Ubuntu-Server 16.04.6 LTS &lt;em&gt;Xenial Xerus&lt;/em&gt; - Release amd64 (20190226) xenial Release&amp;rsquo; does not have a Release file.&lt;br&gt;
E: Failed to fetch cdrom://Ubuntu-Server 16.04.6 LTS &lt;em&gt;Xenial Xerus&lt;/em&gt; - Release amd64 (20190226)/dists/xenial/main/binary-amd64/Packages  Please use apt-cdrom to make this CD-ROM recognized by APT. apt-get update cannot be used to add new CD-ROMs&lt;br&gt;
E: Some index files failed to download. They have been ignored, or old ones used instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;错误处理, 操作如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# vim /etc/apt/sources.list&lt;br&gt;
# 屏蔽掉有cdrom的那一行, 如下&lt;br&gt;
#deb cdrom:[Ubuntu-Server 16.04.6 LTS &lt;em&gt;Xenial Xerus&lt;/em&gt; - Release amd64 (20190226)]/ xenial main restricted&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考: &lt;a class=&#34;link&#34; href=&#34;https://linux.cn/article-5409-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何修复 apt-get update 无法添加新的 CD-ROM 的错误&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;问题-padavan路由作二级桥接无线路由时-系统时间混乱的问题处理&#34;&gt;问题: Padavan路由作二级桥接无线路由时, 系统时间混乱的问题处理&lt;/h2&gt;
&lt;p&gt;状态: 配置了NTP同步, 但无效&lt;br&gt;
原因: 可能是没有配置WAN造成的&lt;br&gt;
处理:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;手动:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ntpd -t -p 192.168.1.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动&lt;br&gt;
在&amp;quot;系统管理&amp;rdquo;-&amp;ldquo;服务&amp;quot;中修改&amp;quot;调度任务 (Crontab)&amp;rdquo;, 增加&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0 * * * * ntpd -t -p 192.168.1.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让系统每小时都做一次时间同步.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux下-以指定用户身份执行&#34;&gt;Linux下, 以指定用户身份执行&lt;/h2&gt;
&lt;p&gt;例: # su - 用户名 -c &amp;ldquo;命令&amp;rdquo;&lt;br&gt;
如:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# su - user -c &amp;ldquo;whoami&amp;rdquo;&lt;br&gt;
user&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说明: 以用户user身份执行whoami, 返回的用户身份是&amp;quot;user&amp;quot;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
