<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>硬件 on 点滴随记</title>
        <link>https://jimway71.github.io/categories/%E7%A1%AC%E4%BB%B6/</link>
        <description>Recent content in 硬件 on 点滴随记</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 23 May 2021 18:27:16 +0800</lastBuildDate><atom:link href="https://jimway71.github.io/categories/%E7%A1%AC%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>使用Github为多种设备编译Openwrt固件</title>
        <link>https://jimway71.github.io/p/%E4%BD%BF%E7%94%A8github%E4%B8%BA%E5%A4%9A%E7%A7%8D%E8%AE%BE%E5%A4%87%E7%BC%96%E8%AF%91openwrt%E5%9B%BA%E4%BB%B6/</link>
        <pubDate>Sun, 23 May 2021 18:27:16 +0800</pubDate>
        
        <guid>https://jimway71.github.io/p/%E4%BD%BF%E7%94%A8github%E4%B8%BA%E5%A4%9A%E7%A7%8D%E8%AE%BE%E5%A4%87%E7%BC%96%E8%AF%91openwrt%E5%9B%BA%E4%BB%B6/</guid>
        <description>&lt;img src="https://jimway71.github.io/wallpaper/NAFO-41.jpg" alt="Featured image of post 使用Github为多种设备编译Openwrt固件" /&gt;&lt;h2 id=&#34;openwrt编译参考&#34;&gt;Openwrt编译参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://p3terx.com/archives/build-openwrt-with-github-actions.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;使用 GitHub Actions 云编译 OpenWrt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/coolsnowwolf/lede&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Lean的Openwrt源码仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/IvanSolis1989/OpenWrt-DIY&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenWrt DIY — 多设备固件云编译&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;源起&#34;&gt;源起&lt;/h2&gt;
&lt;p&gt;最开始是用vps的虚拟机做编译, 虽然编译成功过, 但还是有些问题.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作比较麻烦, 每次都需要做配置&lt;/li&gt;
&lt;li&gt;不清楚怎么更新代码, 现在有好些库都没办法更新, 新功能也无法使用.&lt;/li&gt;
&lt;li&gt;编译时间长, 最后还经常出错, 虽然vps虚拟机还是在米国.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到最后编译总是不成功, 库倒是编译通过了, 只有用编译好的库往现有的设备上安装, 要找关联库什么的, 一堆的麻烦事.&lt;br&gt;
搞vps上的openwrt编译搞烦了, 不想再继续下去, 但更新总得做.&lt;br&gt;
后来看到相关教程, 可以用github Action功能来实现编译, 不用做vps虚拟机, 不需要复杂的配置, 于是开始研究.&lt;/p&gt;
&lt;h2 id=&#34;选库开始瞎搞&#34;&gt;选库(开始瞎搞)&lt;/h2&gt;
&lt;p&gt;看了很长时间的教程, 也没搞懂该怎么做, 算了, 跟着感觉走吧.&lt;br&gt;
&lt;strong&gt;Github上openwrt相关的代码库很多, 需要先选一个库来fork.&lt;/strong&gt;&lt;br&gt;
我在github上搜索&amp;quot;openwrt k2p&amp;quot;, 从Star和Fork最多的库里查找支持设备比较多的库, 由于排第二的&amp;quot;&lt;a class=&#34;link&#34; href=&#34;https://github.com/IvanSolis1989/OpenWrt-DIY&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenWrt DIY — 多设备固件云编译&lt;/a&gt;&amp;ldquo;支持的设备种类最多, 就选了这个库, 后面熟悉了还得看下代码.&lt;/p&gt;
&lt;h2 id=&#34;操作正式开始瞎搞&#34;&gt;操作(正式开始瞎搞)&lt;/h2&gt;
&lt;h3 id=&#34;登录&#34;&gt;登录&lt;/h3&gt;
&lt;p&gt;打开github网站并登录.&lt;/p&gt;
&lt;h3 id=&#34;fork&#34;&gt;Fork&lt;/h3&gt;
&lt;p&gt;打开&amp;rdquo;&lt;a class=&#34;link&#34; href=&#34;https://github.com/IvanSolis1989/OpenWrt-DIY&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenWrt DIY — 多设备固件云编译&lt;/a&gt;&amp;quot;, 点击右上角&amp;quot;Fork&amp;quot;按钮, 就可以在已登录的用户目录下Fork出一个资源库.&lt;/p&gt;
&lt;h3 id=&#34;branch&#34;&gt;Branch&lt;/h3&gt;
&lt;p&gt;打开fork的资源库, 可以看到fork出的目录及文件, 目录及文件是主资源库是一样的.&lt;br&gt;
如果想要修改, 需要在左上角的&amp;quot;main&amp;quot;处点击, 并建立一个分支(Find or Create a branch&amp;hellip;), 再选到新建的分支进行修改(Fork出来的main看样子是不能修改的)&lt;br&gt;
(设置新分支为default: 点击右上角的setting菜单, 选择左侧的&amp;quot;branches&amp;quot;,  在右侧即可选择&amp;quot;Default branch&amp;quot;)&lt;/p&gt;
&lt;h3 id=&#34;修改&#34;&gt;修改&lt;/h3&gt;
&lt;p&gt;可以修改新分支的文件, 其中:&lt;br&gt;
.github/workflows目录: 不同设备的Action配置文件&lt;br&gt;
config目录: 不同设备的配置文件&lt;br&gt;
scripts目录: 编译用的shell - 原库主在这里修改了设备缺省IP地址.&lt;/p&gt;
&lt;h3 id=&#34;source-update-check&#34;&gt;Source Update Check&lt;/h3&gt;
&lt;p&gt;点击Actions, 从左侧的Workflows里选择&amp;quot;Source Update Check&amp;quot;, 先要&amp;quot;Enable workflow&amp;quot;, 再点击右侧的&amp;quot;Run workflow&amp;quot; - 应该是检查并更新代码.&lt;br&gt;
&lt;u&gt;(未成功, 错误信息: &amp;ldquo;Run peter-evans/repository-dispatch@v1&lt;/u&gt;&lt;br&gt;
Error: Parameter token or opts.auth is required&amp;rdquo;)&lt;/p&gt;
&lt;h3 id=&#34;actions&#34;&gt;Actions&lt;/h3&gt;
&lt;p&gt;点击Actions, 从左侧的Workflows里选择设备相关的Build项目,  点击右侧的&amp;quot;Run workflow&amp;quot;, 过一会, 就能看到相应的项目正在正在执行, 点进去能看到执行的详细信息.&lt;br&gt;
编译时间大概需要不到3个小时.&lt;/p&gt;
&lt;h2 id=&#34;出现的问题及处理&#34;&gt;出现的问题及处理&lt;/h2&gt;
&lt;h3 id=&#34;没有生成openwrt-ramips-mt7621-d-team_newifi-d2-squashfs-sysupgradebin文件&#34;&gt;没有生成openwrt-ramips-mt7621-d-team_newifi-d2-squashfs-sysupgrade.bin文件&lt;/h3&gt;
&lt;p&gt;原编译Newifi_D2所用diy-part2.sh无法生成正常的openwrt-ramips-mt7621-d-team_newifi-d2-squashfs-sysupgrade.bin, 而只能生成openwrt-ramips-mt7621-d-team_newifi-d2-initramfs-kernel.bin.&lt;br&gt;
Google后发现, 应该是包太大了, 需要去掉一些插件&lt;br&gt;
参考: &lt;a class=&#34;link&#34; href=&#34;https://github.com/coolsnowwolf/lede/issues/6243&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;ldquo;过渡包“initramfs-kernel.bin问题 #6243&lt;/a&gt;&lt;br&gt;
以前手动编译时也会有类似情况, 选的插件较多情况下会出现类似的问题.&lt;br&gt;
考虑到Newifi-D2的可用空间限制, 编辑了一个专用于D2的&amp;quot;diy-4-Newifi_D2.sh&amp;rdquo;, 在原版本(复制自&amp;quot;diy-part3.sh&amp;quot;)基础上, 去掉了&amp;quot;passwall&amp;quot;+&amp;ldquo;OpenClash&amp;rdquo;+&amp;ldquo;Docker&amp;rdquo;.
同时, D2的配置文件&amp;quot;.github/workflows/Newifi_D2.yml&amp;quot;也需要做修改, 改用这个新的sh文件.&lt;br&gt;
再次使用Action编译, 编译通过, 并生成&amp;quot;openwrt-ramips-mt7621-d-team_newifi-d2-squashfs-sysupgrade.bin&amp;quot;文件.&lt;/p&gt;
&lt;h3 id=&#34;可能只需要删除一个大插件就行-因此再次修改diy-4-newifi_d2sh-在原版本复制自diy-part3sh基础上-仅去掉锐捷认证mentohustopenclash-并再次编译&#34;&gt;可能只需要删除一个大插件就行, &lt;del&gt;因此再次修改&amp;quot;diy-4-Newifi_D2.sh&amp;quot;, 在原版本(复制自&amp;quot;diy-part3.sh&amp;quot;)基础上, 仅去掉锐捷认证(mentohust)+openclash, 并再次编译&lt;/del&gt;.&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;失败 - 无法生成&amp;quot;openwrt-ramips-mt7621-d-team_newifi-d2-squashfs-sysupgrade.bin&amp;quot;文件&lt;/strong&gt;&lt;br&gt;
再次修改&amp;quot;diy-4-Newifi_D2.sh&amp;quot;, 在原版本(复制自&amp;quot;diy-part3.sh&amp;quot;)基础上, 去掉passwall+锐捷认证(mentohust)+openclash, 并再次编译, 编译成功.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>WSL下编译LEDE的openwrt, 用于斐讯K2</title>
        <link>https://jimway71.github.io/p/wsl%E4%B8%8B%E7%BC%96%E8%AF%91lede%E7%9A%84openwrt-%E7%94%A8%E4%BA%8E%E6%96%90%E8%AE%AFk2/</link>
        <pubDate>Mon, 01 Jun 2020 01:06:16 +0800</pubDate>
        
        <guid>https://jimway71.github.io/p/wsl%E4%B8%8B%E7%BC%96%E8%AF%91lede%E7%9A%84openwrt-%E7%94%A8%E4%BA%8E%E6%96%90%E8%AE%AFk2/</guid>
        <description>&lt;img src="https://jimway71.github.io/wallpaper/wallpaper-22.jpg" alt="Featured image of post WSL下编译LEDE的openwrt, 用于斐讯K2" /&gt;&lt;p&gt;2020.6.1&lt;/p&gt;
&lt;h3 id=&#34;openwrt编译命令汇总&#34;&gt;Openwrt编译命令汇总:&lt;/h3&gt;
&lt;p&gt;开始编译:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo apt-get update  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git clone https://github.com/coolsnowwolf/lede  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ./lede  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ vim feeds.conf.default  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./scripts/feeds update -a  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./scripts/feeds install -a  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ make menuconfig  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在make menuconfig中:&lt;br&gt;
选择: MediaTek Ralink MIPS / MT7620 based boards /Phicomm PSG128 rev.Ax&amp;quot;&lt;br&gt;
选择: Luci _ Application _ SSR PLUS&amp;hellip;&amp;quot;&lt;br&gt;
说明: 斐讯K2路由器, CPU型号为MT7620, 芯片架构为MIPS, 路由器型号为PSG1218 rev.Ax; K1 是 PSG1208,K2 是 PSG1218 rev.Ax, K2C是PSG1218 rev.Bx&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Target system -&amp;gt; MediaTek Ralink MIPS  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Subtarget -&amp;gt; MT7620 based boards  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Target Profile -&amp;gt; Phicomm PSG128 rev.Ax  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;继续编译:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ make -j8 download &lt;span class=&#34;nv&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;s  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ make -j15 &lt;span class=&#34;nv&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;s  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;由于空间不够，luci-&amp;gt;application留下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;accesscontrol  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- adbyby-plus  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;arpbind  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;autoreboot  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- ddns  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;firewall  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;flowoffload  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- nlbwmon 流量监控  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ramfree  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssr_plus + trojan  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;upnp  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(因为不能保存配置, 再去掉IPV6支持)  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不知道为什么, 内网的网段(ip)不能成功修改, 每次改过后, 路由就不能保存(或者会丢失)修改的内容: 需要在编译的时候就改掉这个地址。&lt;br&gt;
位于: ./package/base-files/files/bin/config_generate&lt;br&gt;
在make menuconfig完成后修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于用WSL代替虚拟机运行Ubuntu:&lt;br&gt;
当前WSL上Ubuntu最早版本是18.04LTS(16.04LTS已经没有了)，最新的是20.04LTS&lt;br&gt;
用WSL比较简单, 不用费劲去安装, 但移动虚拟机会很麻烦。这个问题可以参考:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在系统重置或重新安装之前，如何备份（WSL）Windows 10的Linux子系统: &lt;br&gt;
Windows 10 v1903 包含内置的WSL导出/导入命令。具体来说，wsl &amp;ndash;export会产生tar和wsl &amp;ndash;import，并会导入先前导出的tar。然后，您可以在计算机之间移动此文件。 您还可以使用指定stdin / stdout -，这应允许您直接转移到另一台计算机并使用远程shell（如）导入ssh。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;错误处理&#34;&gt;错误处理:&lt;/h3&gt;
&lt;p&gt;1 sudo apt-get install gcc-multilib g++-multilib&lt;br&gt;
原因：type_traits:38:10: fatal error: bits/c++config.h: No such file or directory&lt;br&gt;
参考: &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/4643197/missing-include-bits-cconfig-h-when-cross-compiling-64-bit-program-on-32-bit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/4643197/missing-include-bits-cconfig-h-when-cross-compiling-64-bit-program-on-32-bit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 sudo apt install qtchooser&lt;br&gt;
原因: File &amp;ldquo;/usr/lib/python2.7/subprocess.py&amp;rdquo;, line 1047, in _execute_child&lt;br&gt;
参考: &lt;a class=&#34;link&#34; href=&#34;https://github.com/kovidgoyal/build-calibre/issues/9&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kovidgoyal/build-calibre/issues/9&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;编译时长记录&#34;&gt;编译时长记录:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在Google云主机(e2-standard-8（8 个 vCPU，32 GB 内存), 30GSSD硬盘, Ubuntu 16.04)上完成，最后编译用了7个线程，总共用时不到1小时&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mianao.info/2020/05/05/%E7%BC%96%E8%AF%91%E6%9B%B4%E6%96%B0OpenWrt-PassWall%E5%92%8CSSR-plus%E6%8F%92%E4%BB%B6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;编译更新OpenWrt PassWall和SSR-plus插件&lt;/a&gt; From &lt;a class=&#34;link&#34; href=&#34;https://mianao.info/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;mianao&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/coolsnowwolf/lede&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Lean 的 Openwrt 源码仓库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
